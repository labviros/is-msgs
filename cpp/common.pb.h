// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace is {
namespace common {
class DoubleMatrix;
class DoubleMatrixDefaultTypeInternal;
extern DoubleMatrixDefaultTypeInternal _DoubleMatrix_default_instance_;
class FieldSelector;
class FieldSelectorDefaultTypeInternal;
extern FieldSelectorDefaultTypeInternal _FieldSelector_default_instance_;
class SamplingSettings;
class SamplingSettingsDefaultTypeInternal;
extern SamplingSettingsDefaultTypeInternal _SamplingSettings_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace common
}  // namespace is

namespace is {
namespace common {

namespace protobuf_common_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_common_2eproto

enum StatusCode {
  UNKNOWN = 0,
  OK = 1,
  CANCELLED = 2,
  INVALID_ARGUMENT = 3,
  DEADLINE_EXCEEDED = 4,
  NOT_FOUND = 5,
  ALREADY_EXISTS = 6,
  PERMISSION_DENIED = 7,
  UNAUTHENTICATED = 8,
  FAILED_PRECONDITION = 9,
  OUT_OF_RANGE = 10,
  UNIMPLEMENTED = 11,
  INTERNAL_ERROR = 12,
  StatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StatusCode_IsValid(int value);
const StatusCode StatusCode_MIN = UNKNOWN;
const StatusCode StatusCode_MAX = INTERNAL_ERROR;
const int StatusCode_ARRAYSIZE = StatusCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusCode_descriptor();
inline const ::std::string& StatusCode_Name(StatusCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusCode_descriptor(), value);
}
inline bool StatusCode_Parse(
    const ::std::string& name, StatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCode>(
    StatusCode_descriptor(), name, value);
}
// ===================================================================

class SamplingSettings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:is.common.SamplingSettings) */ {
 public:
  SamplingSettings();
  virtual ~SamplingSettings();

  SamplingSettings(const SamplingSettings& from);

  inline SamplingSettings& operator=(const SamplingSettings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SamplingSettings(SamplingSettings&& from) noexcept
    : SamplingSettings() {
    *this = ::std::move(from);
  }

  inline SamplingSettings& operator=(SamplingSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SamplingSettings& default_instance();

  enum RateCase {
    kFrequency = 1,
    kPeriod = 2,
    RATE_NOT_SET = 0,
  };

  static inline const SamplingSettings* internal_default_instance() {
    return reinterpret_cast<const SamplingSettings*>(
               &_SamplingSettings_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SamplingSettings* other);
  friend void swap(SamplingSettings& a, SamplingSettings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SamplingSettings* New() const PROTOBUF_FINAL { return New(NULL); }

  SamplingSettings* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SamplingSettings& from);
  void MergeFrom(const SamplingSettings& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SamplingSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float frequency = 1;
  private:
  bool has_frequency() const;
  public:
  void clear_frequency();
  static const int kFrequencyFieldNumber = 1;
  float frequency() const;
  void set_frequency(float value);

  // float period = 2;
  private:
  bool has_period() const;
  public:
  void clear_period();
  static const int kPeriodFieldNumber = 2;
  float period() const;
  void set_period(float value);

  RateCase rate_case() const;
  // @@protoc_insertion_point(class_scope:is.common.SamplingSettings)
 private:
  void set_has_frequency();
  void set_has_period();

  inline bool has_rate() const;
  void clear_rate();
  inline void clear_has_rate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union RateUnion {
    RateUnion() {}
    float frequency_;
    float period_;
  } rate_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FieldSelector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:is.common.FieldSelector) */ {
 public:
  FieldSelector();
  virtual ~FieldSelector();

  FieldSelector(const FieldSelector& from);

  inline FieldSelector& operator=(const FieldSelector& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FieldSelector(FieldSelector&& from) noexcept
    : FieldSelector() {
    *this = ::std::move(from);
  }

  inline FieldSelector& operator=(FieldSelector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldSelector& default_instance();

  static inline const FieldSelector* internal_default_instance() {
    return reinterpret_cast<const FieldSelector*>(
               &_FieldSelector_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(FieldSelector* other);
  friend void swap(FieldSelector& a, FieldSelector& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FieldSelector* New() const PROTOBUF_FINAL { return New(NULL); }

  FieldSelector* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FieldSelector& from);
  void MergeFrom(const FieldSelector& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FieldSelector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 fields = 1;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 1;
  ::google::protobuf::uint32 fields(int index) const;
  void set_fields(int index, ::google::protobuf::uint32 value);
  void add_fields(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      fields() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_fields();

  // @@protoc_insertion_point(class_scope:is.common.FieldSelector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > fields_;
  mutable int _fields_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:is.common.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(Status&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Status* other);
  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const PROTOBUF_FINAL { return New(NULL); }

  Status* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string why = 2;
  void clear_why();
  static const int kWhyFieldNumber = 2;
  const ::std::string& why() const;
  void set_why(const ::std::string& value);
  #if LANG_CXX11
  void set_why(::std::string&& value);
  #endif
  void set_why(const char* value);
  void set_why(const char* value, size_t size);
  ::std::string* mutable_why();
  ::std::string* release_why();
  void set_allocated_why(::std::string* why);

  // .is.common.StatusCode code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::is::common::StatusCode code() const;
  void set_code(::is::common::StatusCode value);

  // @@protoc_insertion_point(class_scope:is.common.Status)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr why_;
  int code_;
  mutable int _cached_size_;
  friend struct protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DoubleMatrix : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:is.common.DoubleMatrix) */ {
 public:
  DoubleMatrix();
  virtual ~DoubleMatrix();

  DoubleMatrix(const DoubleMatrix& from);

  inline DoubleMatrix& operator=(const DoubleMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DoubleMatrix(DoubleMatrix&& from) noexcept
    : DoubleMatrix() {
    *this = ::std::move(from);
  }

  inline DoubleMatrix& operator=(DoubleMatrix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DoubleMatrix& default_instance();

  static inline const DoubleMatrix* internal_default_instance() {
    return reinterpret_cast<const DoubleMatrix*>(
               &_DoubleMatrix_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DoubleMatrix* other);
  friend void swap(DoubleMatrix& a, DoubleMatrix& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoubleMatrix* New() const PROTOBUF_FINAL { return New(NULL); }

  DoubleMatrix* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DoubleMatrix& from);
  void MergeFrom(const DoubleMatrix& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DoubleMatrix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double data = 3 [packed = true];
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  double data(int index) const;
  void set_data(int index, double value);
  void add_data(double value);
  const ::google::protobuf::RepeatedField< double >&
      data() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_data();

  // uint32 rows = 1;
  void clear_rows();
  static const int kRowsFieldNumber = 1;
  ::google::protobuf::uint32 rows() const;
  void set_rows(::google::protobuf::uint32 value);

  // uint32 cols = 2;
  void clear_cols();
  static const int kColsFieldNumber = 2;
  ::google::protobuf::uint32 cols() const;
  void set_cols(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:is.common.DoubleMatrix)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::uint32 rows_;
  ::google::protobuf::uint32 cols_;
  mutable int _cached_size_;
  friend struct protobuf_common_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SamplingSettings

// float frequency = 1;
inline bool SamplingSettings::has_frequency() const {
  return rate_case() == kFrequency;
}
inline void SamplingSettings::set_has_frequency() {
  _oneof_case_[0] = kFrequency;
}
inline void SamplingSettings::clear_frequency() {
  if (has_frequency()) {
    rate_.frequency_ = 0;
    clear_has_rate();
  }
}
inline float SamplingSettings::frequency() const {
  // @@protoc_insertion_point(field_get:is.common.SamplingSettings.frequency)
  if (has_frequency()) {
    return rate_.frequency_;
  }
  return 0;
}
inline void SamplingSettings::set_frequency(float value) {
  if (!has_frequency()) {
    clear_rate();
    set_has_frequency();
  }
  rate_.frequency_ = value;
  // @@protoc_insertion_point(field_set:is.common.SamplingSettings.frequency)
}

// float period = 2;
inline bool SamplingSettings::has_period() const {
  return rate_case() == kPeriod;
}
inline void SamplingSettings::set_has_period() {
  _oneof_case_[0] = kPeriod;
}
inline void SamplingSettings::clear_period() {
  if (has_period()) {
    rate_.period_ = 0;
    clear_has_rate();
  }
}
inline float SamplingSettings::period() const {
  // @@protoc_insertion_point(field_get:is.common.SamplingSettings.period)
  if (has_period()) {
    return rate_.period_;
  }
  return 0;
}
inline void SamplingSettings::set_period(float value) {
  if (!has_period()) {
    clear_rate();
    set_has_period();
  }
  rate_.period_ = value;
  // @@protoc_insertion_point(field_set:is.common.SamplingSettings.period)
}

inline bool SamplingSettings::has_rate() const {
  return rate_case() != RATE_NOT_SET;
}
inline void SamplingSettings::clear_has_rate() {
  _oneof_case_[0] = RATE_NOT_SET;
}
inline SamplingSettings::RateCase SamplingSettings::rate_case() const {
  return SamplingSettings::RateCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FieldSelector

// repeated uint32 fields = 1;
inline int FieldSelector::fields_size() const {
  return fields_.size();
}
inline void FieldSelector::clear_fields() {
  fields_.Clear();
}
inline ::google::protobuf::uint32 FieldSelector::fields(int index) const {
  // @@protoc_insertion_point(field_get:is.common.FieldSelector.fields)
  return fields_.Get(index);
}
inline void FieldSelector::set_fields(int index, ::google::protobuf::uint32 value) {
  fields_.Set(index, value);
  // @@protoc_insertion_point(field_set:is.common.FieldSelector.fields)
}
inline void FieldSelector::add_fields(::google::protobuf::uint32 value) {
  fields_.Add(value);
  // @@protoc_insertion_point(field_add:is.common.FieldSelector.fields)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FieldSelector::fields() const {
  // @@protoc_insertion_point(field_list:is.common.FieldSelector.fields)
  return fields_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FieldSelector::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:is.common.FieldSelector.fields)
  return &fields_;
}

// -------------------------------------------------------------------

// Status

// .is.common.StatusCode code = 1;
inline void Status::clear_code() {
  code_ = 0;
}
inline ::is::common::StatusCode Status::code() const {
  // @@protoc_insertion_point(field_get:is.common.Status.code)
  return static_cast< ::is::common::StatusCode >(code_);
}
inline void Status::set_code(::is::common::StatusCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:is.common.Status.code)
}

// string why = 2;
inline void Status::clear_why() {
  why_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Status::why() const {
  // @@protoc_insertion_point(field_get:is.common.Status.why)
  return why_.GetNoArena();
}
inline void Status::set_why(const ::std::string& value) {
  
  why_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:is.common.Status.why)
}
#if LANG_CXX11
inline void Status::set_why(::std::string&& value) {
  
  why_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:is.common.Status.why)
}
#endif
inline void Status::set_why(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  why_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:is.common.Status.why)
}
inline void Status::set_why(const char* value, size_t size) {
  
  why_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:is.common.Status.why)
}
inline ::std::string* Status::mutable_why() {
  
  // @@protoc_insertion_point(field_mutable:is.common.Status.why)
  return why_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_why() {
  // @@protoc_insertion_point(field_release:is.common.Status.why)
  
  return why_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_why(::std::string* why) {
  if (why != NULL) {
    
  } else {
    
  }
  why_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), why);
  // @@protoc_insertion_point(field_set_allocated:is.common.Status.why)
}

// -------------------------------------------------------------------

// DoubleMatrix

// uint32 rows = 1;
inline void DoubleMatrix::clear_rows() {
  rows_ = 0u;
}
inline ::google::protobuf::uint32 DoubleMatrix::rows() const {
  // @@protoc_insertion_point(field_get:is.common.DoubleMatrix.rows)
  return rows_;
}
inline void DoubleMatrix::set_rows(::google::protobuf::uint32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:is.common.DoubleMatrix.rows)
}

// uint32 cols = 2;
inline void DoubleMatrix::clear_cols() {
  cols_ = 0u;
}
inline ::google::protobuf::uint32 DoubleMatrix::cols() const {
  // @@protoc_insertion_point(field_get:is.common.DoubleMatrix.cols)
  return cols_;
}
inline void DoubleMatrix::set_cols(::google::protobuf::uint32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:is.common.DoubleMatrix.cols)
}

// repeated double data = 3 [packed = true];
inline int DoubleMatrix::data_size() const {
  return data_.size();
}
inline void DoubleMatrix::clear_data() {
  data_.Clear();
}
inline double DoubleMatrix::data(int index) const {
  // @@protoc_insertion_point(field_get:is.common.DoubleMatrix.data)
  return data_.Get(index);
}
inline void DoubleMatrix::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:is.common.DoubleMatrix.data)
}
inline void DoubleMatrix::add_data(double value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:is.common.DoubleMatrix.data)
}
inline const ::google::protobuf::RepeatedField< double >&
DoubleMatrix::data() const {
  // @@protoc_insertion_point(field_list:is.common.DoubleMatrix.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< double >*
DoubleMatrix::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:is.common.DoubleMatrix.data)
  return &data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace common
}  // namespace is

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::is::common::StatusCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::is::common::StatusCode>() {
  return ::is::common::StatusCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
