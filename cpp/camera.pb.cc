// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "camera.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace is {
namespace vision {
class CameraSettingDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CameraSetting>
     _instance;
} _CameraSetting_default_instance_;
class CameraSettingsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CameraSettings>
     _instance;
} _CameraSettings_default_instance_;
class CameraConfigDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CameraConfig>
     _instance;
} _CameraConfig_default_instance_;
class CameraCalibrationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CameraCalibration>
     _instance;
} _CameraCalibration_default_instance_;

namespace protobuf_camera_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSetting, automatic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSetting, ratio_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, brightness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, exposure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, focus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, gamma_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, hue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, iris_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, saturation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, sharpness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, shutter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, white_balance_bu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, white_balance_rv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraSettings, zoom_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraConfig, sampling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraConfig, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraConfig, camera_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraCalibration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(CameraSetting)},
  { 7, -1, sizeof(CameraSettings)},
  { 25, -1, sizeof(CameraConfig)},
  { 33, -1, sizeof(CameraCalibration)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CameraSetting_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CameraSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CameraConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CameraCalibration_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "camera.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::is::common::protobuf_common_2eproto::InitDefaults();
  ::is::vision::protobuf_image_2eproto::InitDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fempty_2eproto::InitDefaults();
  _CameraSetting_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CameraSetting_default_instance_);_CameraSettings_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CameraSettings_default_instance_);_CameraConfig_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CameraConfig_default_instance_);_CameraCalibration_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CameraCalibration_default_instance_);_CameraSettings_default_instance_._instance.get_mutable()->brightness_ = const_cast< ::is::vision::CameraSetting*>(
      ::is::vision::CameraSetting::internal_default_instance());
  _CameraSettings_default_instance_._instance.get_mutable()->exposure_ = const_cast< ::is::vision::CameraSetting*>(
      ::is::vision::CameraSetting::internal_default_instance());
  _CameraSettings_default_instance_._instance.get_mutable()->focus_ = const_cast< ::is::vision::CameraSetting*>(
      ::is::vision::CameraSetting::internal_default_instance());
  _CameraSettings_default_instance_._instance.get_mutable()->gain_ = const_cast< ::is::vision::CameraSetting*>(
      ::is::vision::CameraSetting::internal_default_instance());
  _CameraSettings_default_instance_._instance.get_mutable()->gamma_ = const_cast< ::is::vision::CameraSetting*>(
      ::is::vision::CameraSetting::internal_default_instance());
  _CameraSettings_default_instance_._instance.get_mutable()->hue_ = const_cast< ::is::vision::CameraSetting*>(
      ::is::vision::CameraSetting::internal_default_instance());
  _CameraSettings_default_instance_._instance.get_mutable()->iris_ = const_cast< ::is::vision::CameraSetting*>(
      ::is::vision::CameraSetting::internal_default_instance());
  _CameraSettings_default_instance_._instance.get_mutable()->saturation_ = const_cast< ::is::vision::CameraSetting*>(
      ::is::vision::CameraSetting::internal_default_instance());
  _CameraSettings_default_instance_._instance.get_mutable()->sharpness_ = const_cast< ::is::vision::CameraSetting*>(
      ::is::vision::CameraSetting::internal_default_instance());
  _CameraSettings_default_instance_._instance.get_mutable()->shutter_ = const_cast< ::is::vision::CameraSetting*>(
      ::is::vision::CameraSetting::internal_default_instance());
  _CameraSettings_default_instance_._instance.get_mutable()->white_balance_bu_ = const_cast< ::is::vision::CameraSetting*>(
      ::is::vision::CameraSetting::internal_default_instance());
  _CameraSettings_default_instance_._instance.get_mutable()->white_balance_rv_ = const_cast< ::is::vision::CameraSetting*>(
      ::is::vision::CameraSetting::internal_default_instance());
  _CameraSettings_default_instance_._instance.get_mutable()->zoom_ = const_cast< ::is::vision::CameraSetting*>(
      ::is::vision::CameraSetting::internal_default_instance());
  _CameraConfig_default_instance_._instance.get_mutable()->sampling_ = const_cast< ::is::common::SamplingSettings*>(
      ::is::common::SamplingSettings::internal_default_instance());
  _CameraConfig_default_instance_._instance.get_mutable()->image_ = const_cast< ::is::vision::ImageSettings*>(
      ::is::vision::ImageSettings::internal_default_instance());
  _CameraConfig_default_instance_._instance.get_mutable()->camera_ = const_cast< ::is::vision::CameraSettings*>(
      ::is::vision::CameraSettings::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014camera.proto\022\tis.vision\032\014common.proto\032"
      "\013image.proto\032\033google/protobuf/empty.prot"
      "o\"1\n\rCameraSetting\022\021\n\tautomatic\030\001 \001(\010\022\r\n"
      "\005ratio\030\002 \001(\002\"\311\004\n\016CameraSettings\022,\n\nbrigh"
      "tness\030\001 \001(\0132\030.is.vision.CameraSetting\022*\n"
      "\010exposure\030\002 \001(\0132\030.is.vision.CameraSettin"
      "g\022\'\n\005focus\030\003 \001(\0132\030.is.vision.CameraSetti"
      "ng\022&\n\004gain\030\004 \001(\0132\030.is.vision.CameraSetti"
      "ng\022\'\n\005gamma\030\005 \001(\0132\030.is.vision.CameraSett"
      "ing\022%\n\003hue\030\006 \001(\0132\030.is.vision.CameraSetti"
      "ng\022&\n\004iris\030\007 \001(\0132\030.is.vision.CameraSetti"
      "ng\022,\n\nsaturation\030\010 \001(\0132\030.is.vision.Camer"
      "aSetting\022+\n\tsharpness\030\t \001(\0132\030.is.vision."
      "CameraSetting\022)\n\007shutter\030\n \001(\0132\030.is.visi"
      "on.CameraSetting\0222\n\020white_balance_bu\030\013 \001"
      "(\0132\030.is.vision.CameraSetting\0222\n\020white_ba"
      "lance_rv\030\014 \001(\0132\030.is.vision.CameraSetting"
      "\022&\n\004zoom\030\r \001(\0132\030.is.vision.CameraSetting"
      "\"\221\001\n\014CameraConfig\022-\n\010sampling\030\001 \001(\0132\033.is"
      ".common.SamplingSettings\022\'\n\005image\030\002 \001(\0132"
      "\030.is.vision.ImageSettings\022)\n\006camera\030\003 \001("
      "\0132\031.is.vision.CameraSettings\"\023\n\021CameraCa"
      "libration*]\n\022CameraConfigFields\022\007\n\003ALL\020\000"
      "\022\025\n\021SAMPLING_SETTINGS\020\001\022\022\n\016IMAGE_SETTING"
      "S\020\002\022\023\n\017CAMERA_SETTINGS\020\0032\234\001\n\rCameraGatew"
      "ay\022E\n\020SetConfiguration\022\027.is.vision.Camer"
      "aConfig\032\026.google.protobuf.Empty\"\000\022D\n\rCon"
      "figuration\022\030.is.common.FieldSelector\032\027.i"
      "s.vision.CameraConfig\"\000B\017\n\rcom.is.vision"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1168);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "camera.proto", &protobuf_RegisterTypes);
  ::is::common::protobuf_common_2eproto::AddDescriptors();
  ::is::vision::protobuf_image_2eproto::AddDescriptors();
  ::google::protobuf::protobuf_google_2fprotobuf_2fempty_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_camera_2eproto

const ::google::protobuf::EnumDescriptor* CameraConfigFields_descriptor() {
  protobuf_camera_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_camera_2eproto::file_level_enum_descriptors[0];
}
bool CameraConfigFields_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraSetting::kAutomaticFieldNumber;
const int CameraSetting::kRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraSetting::CameraSetting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_camera_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:is.vision.CameraSetting)
}
CameraSetting::CameraSetting(const CameraSetting& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&automatic_, &from.automatic_,
    static_cast<size_t>(reinterpret_cast<char*>(&ratio_) -
    reinterpret_cast<char*>(&automatic_)) + sizeof(ratio_));
  // @@protoc_insertion_point(copy_constructor:is.vision.CameraSetting)
}

void CameraSetting::SharedCtor() {
  ::memset(&automatic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&automatic_)) + sizeof(ratio_));
  _cached_size_ = 0;
}

CameraSetting::~CameraSetting() {
  // @@protoc_insertion_point(destructor:is.vision.CameraSetting)
  SharedDtor();
}

void CameraSetting::SharedDtor() {
}

void CameraSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraSetting::descriptor() {
  protobuf_camera_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_camera_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraSetting& CameraSetting::default_instance() {
  protobuf_camera_2eproto::InitDefaults();
  return *internal_default_instance();
}

CameraSetting* CameraSetting::New(::google::protobuf::Arena* arena) const {
  CameraSetting* n = new CameraSetting;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:is.vision.CameraSetting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&automatic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ratio_) -
      reinterpret_cast<char*>(&automatic_)) + sizeof(ratio_));
  _internal_metadata_.Clear();
}

bool CameraSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:is.vision.CameraSetting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool automatic = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &automatic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ratio = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:is.vision.CameraSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:is.vision.CameraSetting)
  return false;
#undef DO_
}

void CameraSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:is.vision.CameraSetting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool automatic = 1;
  if (this->automatic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->automatic(), output);
  }

  // float ratio = 2;
  if (this->ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ratio(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:is.vision.CameraSetting)
}

::google::protobuf::uint8* CameraSetting::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:is.vision.CameraSetting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool automatic = 1;
  if (this->automatic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->automatic(), target);
  }

  // float ratio = 2;
  if (this->ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->ratio(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:is.vision.CameraSetting)
  return target;
}

size_t CameraSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:is.vision.CameraSetting)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool automatic = 1;
  if (this->automatic() != 0) {
    total_size += 1 + 1;
  }

  // float ratio = 2;
  if (this->ratio() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraSetting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:is.vision.CameraSetting)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraSetting* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraSetting>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:is.vision.CameraSetting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:is.vision.CameraSetting)
    MergeFrom(*source);
  }
}

void CameraSetting::MergeFrom(const CameraSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:is.vision.CameraSetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.automatic() != 0) {
    set_automatic(from.automatic());
  }
  if (from.ratio() != 0) {
    set_ratio(from.ratio());
  }
}

void CameraSetting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:is.vision.CameraSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraSetting::CopyFrom(const CameraSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:is.vision.CameraSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraSetting::IsInitialized() const {
  return true;
}

void CameraSetting::Swap(CameraSetting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraSetting::InternalSwap(CameraSetting* other) {
  using std::swap;
  swap(automatic_, other->automatic_);
  swap(ratio_, other->ratio_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraSetting::GetMetadata() const {
  protobuf_camera_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_camera_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraSetting

// bool automatic = 1;
void CameraSetting::clear_automatic() {
  automatic_ = false;
}
bool CameraSetting::automatic() const {
  // @@protoc_insertion_point(field_get:is.vision.CameraSetting.automatic)
  return automatic_;
}
void CameraSetting::set_automatic(bool value) {
  
  automatic_ = value;
  // @@protoc_insertion_point(field_set:is.vision.CameraSetting.automatic)
}

// float ratio = 2;
void CameraSetting::clear_ratio() {
  ratio_ = 0;
}
float CameraSetting::ratio() const {
  // @@protoc_insertion_point(field_get:is.vision.CameraSetting.ratio)
  return ratio_;
}
void CameraSetting::set_ratio(float value) {
  
  ratio_ = value;
  // @@protoc_insertion_point(field_set:is.vision.CameraSetting.ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraSettings::kBrightnessFieldNumber;
const int CameraSettings::kExposureFieldNumber;
const int CameraSettings::kFocusFieldNumber;
const int CameraSettings::kGainFieldNumber;
const int CameraSettings::kGammaFieldNumber;
const int CameraSettings::kHueFieldNumber;
const int CameraSettings::kIrisFieldNumber;
const int CameraSettings::kSaturationFieldNumber;
const int CameraSettings::kSharpnessFieldNumber;
const int CameraSettings::kShutterFieldNumber;
const int CameraSettings::kWhiteBalanceBuFieldNumber;
const int CameraSettings::kWhiteBalanceRvFieldNumber;
const int CameraSettings::kZoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraSettings::CameraSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_camera_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:is.vision.CameraSettings)
}
CameraSettings::CameraSettings(const CameraSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_brightness()) {
    brightness_ = new ::is::vision::CameraSetting(*from.brightness_);
  } else {
    brightness_ = NULL;
  }
  if (from.has_exposure()) {
    exposure_ = new ::is::vision::CameraSetting(*from.exposure_);
  } else {
    exposure_ = NULL;
  }
  if (from.has_focus()) {
    focus_ = new ::is::vision::CameraSetting(*from.focus_);
  } else {
    focus_ = NULL;
  }
  if (from.has_gain()) {
    gain_ = new ::is::vision::CameraSetting(*from.gain_);
  } else {
    gain_ = NULL;
  }
  if (from.has_gamma()) {
    gamma_ = new ::is::vision::CameraSetting(*from.gamma_);
  } else {
    gamma_ = NULL;
  }
  if (from.has_hue()) {
    hue_ = new ::is::vision::CameraSetting(*from.hue_);
  } else {
    hue_ = NULL;
  }
  if (from.has_iris()) {
    iris_ = new ::is::vision::CameraSetting(*from.iris_);
  } else {
    iris_ = NULL;
  }
  if (from.has_saturation()) {
    saturation_ = new ::is::vision::CameraSetting(*from.saturation_);
  } else {
    saturation_ = NULL;
  }
  if (from.has_sharpness()) {
    sharpness_ = new ::is::vision::CameraSetting(*from.sharpness_);
  } else {
    sharpness_ = NULL;
  }
  if (from.has_shutter()) {
    shutter_ = new ::is::vision::CameraSetting(*from.shutter_);
  } else {
    shutter_ = NULL;
  }
  if (from.has_white_balance_bu()) {
    white_balance_bu_ = new ::is::vision::CameraSetting(*from.white_balance_bu_);
  } else {
    white_balance_bu_ = NULL;
  }
  if (from.has_white_balance_rv()) {
    white_balance_rv_ = new ::is::vision::CameraSetting(*from.white_balance_rv_);
  } else {
    white_balance_rv_ = NULL;
  }
  if (from.has_zoom()) {
    zoom_ = new ::is::vision::CameraSetting(*from.zoom_);
  } else {
    zoom_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:is.vision.CameraSettings)
}

void CameraSettings::SharedCtor() {
  ::memset(&brightness_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zoom_) -
      reinterpret_cast<char*>(&brightness_)) + sizeof(zoom_));
  _cached_size_ = 0;
}

CameraSettings::~CameraSettings() {
  // @@protoc_insertion_point(destructor:is.vision.CameraSettings)
  SharedDtor();
}

void CameraSettings::SharedDtor() {
  if (this != internal_default_instance()) delete brightness_;
  if (this != internal_default_instance()) delete exposure_;
  if (this != internal_default_instance()) delete focus_;
  if (this != internal_default_instance()) delete gain_;
  if (this != internal_default_instance()) delete gamma_;
  if (this != internal_default_instance()) delete hue_;
  if (this != internal_default_instance()) delete iris_;
  if (this != internal_default_instance()) delete saturation_;
  if (this != internal_default_instance()) delete sharpness_;
  if (this != internal_default_instance()) delete shutter_;
  if (this != internal_default_instance()) delete white_balance_bu_;
  if (this != internal_default_instance()) delete white_balance_rv_;
  if (this != internal_default_instance()) delete zoom_;
}

void CameraSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraSettings::descriptor() {
  protobuf_camera_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_camera_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraSettings& CameraSettings::default_instance() {
  protobuf_camera_2eproto::InitDefaults();
  return *internal_default_instance();
}

CameraSettings* CameraSettings::New(::google::protobuf::Arena* arena) const {
  CameraSettings* n = new CameraSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:is.vision.CameraSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && brightness_ != NULL) {
    delete brightness_;
  }
  brightness_ = NULL;
  if (GetArenaNoVirtual() == NULL && exposure_ != NULL) {
    delete exposure_;
  }
  exposure_ = NULL;
  if (GetArenaNoVirtual() == NULL && focus_ != NULL) {
    delete focus_;
  }
  focus_ = NULL;
  if (GetArenaNoVirtual() == NULL && gain_ != NULL) {
    delete gain_;
  }
  gain_ = NULL;
  if (GetArenaNoVirtual() == NULL && gamma_ != NULL) {
    delete gamma_;
  }
  gamma_ = NULL;
  if (GetArenaNoVirtual() == NULL && hue_ != NULL) {
    delete hue_;
  }
  hue_ = NULL;
  if (GetArenaNoVirtual() == NULL && iris_ != NULL) {
    delete iris_;
  }
  iris_ = NULL;
  if (GetArenaNoVirtual() == NULL && saturation_ != NULL) {
    delete saturation_;
  }
  saturation_ = NULL;
  if (GetArenaNoVirtual() == NULL && sharpness_ != NULL) {
    delete sharpness_;
  }
  sharpness_ = NULL;
  if (GetArenaNoVirtual() == NULL && shutter_ != NULL) {
    delete shutter_;
  }
  shutter_ = NULL;
  if (GetArenaNoVirtual() == NULL && white_balance_bu_ != NULL) {
    delete white_balance_bu_;
  }
  white_balance_bu_ = NULL;
  if (GetArenaNoVirtual() == NULL && white_balance_rv_ != NULL) {
    delete white_balance_rv_;
  }
  white_balance_rv_ = NULL;
  if (GetArenaNoVirtual() == NULL && zoom_ != NULL) {
    delete zoom_;
  }
  zoom_ = NULL;
  _internal_metadata_.Clear();
}

bool CameraSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:is.vision.CameraSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .is.vision.CameraSetting brightness = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brightness()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .is.vision.CameraSetting exposure = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exposure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .is.vision.CameraSetting focus = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_focus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .is.vision.CameraSetting gain = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .is.vision.CameraSetting gamma = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamma()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .is.vision.CameraSetting hue = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .is.vision.CameraSetting iris = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iris()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .is.vision.CameraSetting saturation = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_saturation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .is.vision.CameraSetting sharpness = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sharpness()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .is.vision.CameraSetting shutter = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shutter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .is.vision.CameraSetting white_balance_bu = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_white_balance_bu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .is.vision.CameraSetting white_balance_rv = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_white_balance_rv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .is.vision.CameraSetting zoom = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_zoom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:is.vision.CameraSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:is.vision.CameraSettings)
  return false;
#undef DO_
}

void CameraSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:is.vision.CameraSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .is.vision.CameraSetting brightness = 1;
  if (this->has_brightness()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->brightness_, output);
  }

  // .is.vision.CameraSetting exposure = 2;
  if (this->has_exposure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->exposure_, output);
  }

  // .is.vision.CameraSetting focus = 3;
  if (this->has_focus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->focus_, output);
  }

  // .is.vision.CameraSetting gain = 4;
  if (this->has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->gain_, output);
  }

  // .is.vision.CameraSetting gamma = 5;
  if (this->has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->gamma_, output);
  }

  // .is.vision.CameraSetting hue = 6;
  if (this->has_hue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->hue_, output);
  }

  // .is.vision.CameraSetting iris = 7;
  if (this->has_iris()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->iris_, output);
  }

  // .is.vision.CameraSetting saturation = 8;
  if (this->has_saturation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->saturation_, output);
  }

  // .is.vision.CameraSetting sharpness = 9;
  if (this->has_sharpness()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->sharpness_, output);
  }

  // .is.vision.CameraSetting shutter = 10;
  if (this->has_shutter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->shutter_, output);
  }

  // .is.vision.CameraSetting white_balance_bu = 11;
  if (this->has_white_balance_bu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->white_balance_bu_, output);
  }

  // .is.vision.CameraSetting white_balance_rv = 12;
  if (this->has_white_balance_rv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->white_balance_rv_, output);
  }

  // .is.vision.CameraSetting zoom = 13;
  if (this->has_zoom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->zoom_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:is.vision.CameraSettings)
}

::google::protobuf::uint8* CameraSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:is.vision.CameraSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .is.vision.CameraSetting brightness = 1;
  if (this->has_brightness()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->brightness_, deterministic, target);
  }

  // .is.vision.CameraSetting exposure = 2;
  if (this->has_exposure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->exposure_, deterministic, target);
  }

  // .is.vision.CameraSetting focus = 3;
  if (this->has_focus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->focus_, deterministic, target);
  }

  // .is.vision.CameraSetting gain = 4;
  if (this->has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->gain_, deterministic, target);
  }

  // .is.vision.CameraSetting gamma = 5;
  if (this->has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->gamma_, deterministic, target);
  }

  // .is.vision.CameraSetting hue = 6;
  if (this->has_hue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->hue_, deterministic, target);
  }

  // .is.vision.CameraSetting iris = 7;
  if (this->has_iris()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->iris_, deterministic, target);
  }

  // .is.vision.CameraSetting saturation = 8;
  if (this->has_saturation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->saturation_, deterministic, target);
  }

  // .is.vision.CameraSetting sharpness = 9;
  if (this->has_sharpness()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->sharpness_, deterministic, target);
  }

  // .is.vision.CameraSetting shutter = 10;
  if (this->has_shutter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->shutter_, deterministic, target);
  }

  // .is.vision.CameraSetting white_balance_bu = 11;
  if (this->has_white_balance_bu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->white_balance_bu_, deterministic, target);
  }

  // .is.vision.CameraSetting white_balance_rv = 12;
  if (this->has_white_balance_rv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->white_balance_rv_, deterministic, target);
  }

  // .is.vision.CameraSetting zoom = 13;
  if (this->has_zoom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->zoom_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:is.vision.CameraSettings)
  return target;
}

size_t CameraSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:is.vision.CameraSettings)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .is.vision.CameraSetting brightness = 1;
  if (this->has_brightness()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->brightness_);
  }

  // .is.vision.CameraSetting exposure = 2;
  if (this->has_exposure()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exposure_);
  }

  // .is.vision.CameraSetting focus = 3;
  if (this->has_focus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->focus_);
  }

  // .is.vision.CameraSetting gain = 4;
  if (this->has_gain()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gain_);
  }

  // .is.vision.CameraSetting gamma = 5;
  if (this->has_gamma()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gamma_);
  }

  // .is.vision.CameraSetting hue = 6;
  if (this->has_hue()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hue_);
  }

  // .is.vision.CameraSetting iris = 7;
  if (this->has_iris()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->iris_);
  }

  // .is.vision.CameraSetting saturation = 8;
  if (this->has_saturation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->saturation_);
  }

  // .is.vision.CameraSetting sharpness = 9;
  if (this->has_sharpness()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sharpness_);
  }

  // .is.vision.CameraSetting shutter = 10;
  if (this->has_shutter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shutter_);
  }

  // .is.vision.CameraSetting white_balance_bu = 11;
  if (this->has_white_balance_bu()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->white_balance_bu_);
  }

  // .is.vision.CameraSetting white_balance_rv = 12;
  if (this->has_white_balance_rv()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->white_balance_rv_);
  }

  // .is.vision.CameraSetting zoom = 13;
  if (this->has_zoom()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->zoom_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:is.vision.CameraSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:is.vision.CameraSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:is.vision.CameraSettings)
    MergeFrom(*source);
  }
}

void CameraSettings::MergeFrom(const CameraSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:is.vision.CameraSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_brightness()) {
    mutable_brightness()->::is::vision::CameraSetting::MergeFrom(from.brightness());
  }
  if (from.has_exposure()) {
    mutable_exposure()->::is::vision::CameraSetting::MergeFrom(from.exposure());
  }
  if (from.has_focus()) {
    mutable_focus()->::is::vision::CameraSetting::MergeFrom(from.focus());
  }
  if (from.has_gain()) {
    mutable_gain()->::is::vision::CameraSetting::MergeFrom(from.gain());
  }
  if (from.has_gamma()) {
    mutable_gamma()->::is::vision::CameraSetting::MergeFrom(from.gamma());
  }
  if (from.has_hue()) {
    mutable_hue()->::is::vision::CameraSetting::MergeFrom(from.hue());
  }
  if (from.has_iris()) {
    mutable_iris()->::is::vision::CameraSetting::MergeFrom(from.iris());
  }
  if (from.has_saturation()) {
    mutable_saturation()->::is::vision::CameraSetting::MergeFrom(from.saturation());
  }
  if (from.has_sharpness()) {
    mutable_sharpness()->::is::vision::CameraSetting::MergeFrom(from.sharpness());
  }
  if (from.has_shutter()) {
    mutable_shutter()->::is::vision::CameraSetting::MergeFrom(from.shutter());
  }
  if (from.has_white_balance_bu()) {
    mutable_white_balance_bu()->::is::vision::CameraSetting::MergeFrom(from.white_balance_bu());
  }
  if (from.has_white_balance_rv()) {
    mutable_white_balance_rv()->::is::vision::CameraSetting::MergeFrom(from.white_balance_rv());
  }
  if (from.has_zoom()) {
    mutable_zoom()->::is::vision::CameraSetting::MergeFrom(from.zoom());
  }
}

void CameraSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:is.vision.CameraSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraSettings::CopyFrom(const CameraSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:is.vision.CameraSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraSettings::IsInitialized() const {
  return true;
}

void CameraSettings::Swap(CameraSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraSettings::InternalSwap(CameraSettings* other) {
  using std::swap;
  swap(brightness_, other->brightness_);
  swap(exposure_, other->exposure_);
  swap(focus_, other->focus_);
  swap(gain_, other->gain_);
  swap(gamma_, other->gamma_);
  swap(hue_, other->hue_);
  swap(iris_, other->iris_);
  swap(saturation_, other->saturation_);
  swap(sharpness_, other->sharpness_);
  swap(shutter_, other->shutter_);
  swap(white_balance_bu_, other->white_balance_bu_);
  swap(white_balance_rv_, other->white_balance_rv_);
  swap(zoom_, other->zoom_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraSettings::GetMetadata() const {
  protobuf_camera_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_camera_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraSettings

// .is.vision.CameraSetting brightness = 1;
bool CameraSettings::has_brightness() const {
  return this != internal_default_instance() && brightness_ != NULL;
}
void CameraSettings::clear_brightness() {
  if (GetArenaNoVirtual() == NULL && brightness_ != NULL) delete brightness_;
  brightness_ = NULL;
}
const ::is::vision::CameraSetting& CameraSettings::brightness() const {
  const ::is::vision::CameraSetting* p = brightness_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.brightness)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
::is::vision::CameraSetting* CameraSettings::mutable_brightness() {
  
  if (brightness_ == NULL) {
    brightness_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.brightness)
  return brightness_;
}
::is::vision::CameraSetting* CameraSettings::release_brightness() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.brightness)
  
  ::is::vision::CameraSetting* temp = brightness_;
  brightness_ = NULL;
  return temp;
}
void CameraSettings::set_allocated_brightness(::is::vision::CameraSetting* brightness) {
  delete brightness_;
  brightness_ = brightness;
  if (brightness) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.brightness)
}

// .is.vision.CameraSetting exposure = 2;
bool CameraSettings::has_exposure() const {
  return this != internal_default_instance() && exposure_ != NULL;
}
void CameraSettings::clear_exposure() {
  if (GetArenaNoVirtual() == NULL && exposure_ != NULL) delete exposure_;
  exposure_ = NULL;
}
const ::is::vision::CameraSetting& CameraSettings::exposure() const {
  const ::is::vision::CameraSetting* p = exposure_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.exposure)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
::is::vision::CameraSetting* CameraSettings::mutable_exposure() {
  
  if (exposure_ == NULL) {
    exposure_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.exposure)
  return exposure_;
}
::is::vision::CameraSetting* CameraSettings::release_exposure() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.exposure)
  
  ::is::vision::CameraSetting* temp = exposure_;
  exposure_ = NULL;
  return temp;
}
void CameraSettings::set_allocated_exposure(::is::vision::CameraSetting* exposure) {
  delete exposure_;
  exposure_ = exposure;
  if (exposure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.exposure)
}

// .is.vision.CameraSetting focus = 3;
bool CameraSettings::has_focus() const {
  return this != internal_default_instance() && focus_ != NULL;
}
void CameraSettings::clear_focus() {
  if (GetArenaNoVirtual() == NULL && focus_ != NULL) delete focus_;
  focus_ = NULL;
}
const ::is::vision::CameraSetting& CameraSettings::focus() const {
  const ::is::vision::CameraSetting* p = focus_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.focus)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
::is::vision::CameraSetting* CameraSettings::mutable_focus() {
  
  if (focus_ == NULL) {
    focus_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.focus)
  return focus_;
}
::is::vision::CameraSetting* CameraSettings::release_focus() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.focus)
  
  ::is::vision::CameraSetting* temp = focus_;
  focus_ = NULL;
  return temp;
}
void CameraSettings::set_allocated_focus(::is::vision::CameraSetting* focus) {
  delete focus_;
  focus_ = focus;
  if (focus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.focus)
}

// .is.vision.CameraSetting gain = 4;
bool CameraSettings::has_gain() const {
  return this != internal_default_instance() && gain_ != NULL;
}
void CameraSettings::clear_gain() {
  if (GetArenaNoVirtual() == NULL && gain_ != NULL) delete gain_;
  gain_ = NULL;
}
const ::is::vision::CameraSetting& CameraSettings::gain() const {
  const ::is::vision::CameraSetting* p = gain_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.gain)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
::is::vision::CameraSetting* CameraSettings::mutable_gain() {
  
  if (gain_ == NULL) {
    gain_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.gain)
  return gain_;
}
::is::vision::CameraSetting* CameraSettings::release_gain() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.gain)
  
  ::is::vision::CameraSetting* temp = gain_;
  gain_ = NULL;
  return temp;
}
void CameraSettings::set_allocated_gain(::is::vision::CameraSetting* gain) {
  delete gain_;
  gain_ = gain;
  if (gain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.gain)
}

// .is.vision.CameraSetting gamma = 5;
bool CameraSettings::has_gamma() const {
  return this != internal_default_instance() && gamma_ != NULL;
}
void CameraSettings::clear_gamma() {
  if (GetArenaNoVirtual() == NULL && gamma_ != NULL) delete gamma_;
  gamma_ = NULL;
}
const ::is::vision::CameraSetting& CameraSettings::gamma() const {
  const ::is::vision::CameraSetting* p = gamma_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.gamma)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
::is::vision::CameraSetting* CameraSettings::mutable_gamma() {
  
  if (gamma_ == NULL) {
    gamma_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.gamma)
  return gamma_;
}
::is::vision::CameraSetting* CameraSettings::release_gamma() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.gamma)
  
  ::is::vision::CameraSetting* temp = gamma_;
  gamma_ = NULL;
  return temp;
}
void CameraSettings::set_allocated_gamma(::is::vision::CameraSetting* gamma) {
  delete gamma_;
  gamma_ = gamma;
  if (gamma) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.gamma)
}

// .is.vision.CameraSetting hue = 6;
bool CameraSettings::has_hue() const {
  return this != internal_default_instance() && hue_ != NULL;
}
void CameraSettings::clear_hue() {
  if (GetArenaNoVirtual() == NULL && hue_ != NULL) delete hue_;
  hue_ = NULL;
}
const ::is::vision::CameraSetting& CameraSettings::hue() const {
  const ::is::vision::CameraSetting* p = hue_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.hue)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
::is::vision::CameraSetting* CameraSettings::mutable_hue() {
  
  if (hue_ == NULL) {
    hue_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.hue)
  return hue_;
}
::is::vision::CameraSetting* CameraSettings::release_hue() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.hue)
  
  ::is::vision::CameraSetting* temp = hue_;
  hue_ = NULL;
  return temp;
}
void CameraSettings::set_allocated_hue(::is::vision::CameraSetting* hue) {
  delete hue_;
  hue_ = hue;
  if (hue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.hue)
}

// .is.vision.CameraSetting iris = 7;
bool CameraSettings::has_iris() const {
  return this != internal_default_instance() && iris_ != NULL;
}
void CameraSettings::clear_iris() {
  if (GetArenaNoVirtual() == NULL && iris_ != NULL) delete iris_;
  iris_ = NULL;
}
const ::is::vision::CameraSetting& CameraSettings::iris() const {
  const ::is::vision::CameraSetting* p = iris_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.iris)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
::is::vision::CameraSetting* CameraSettings::mutable_iris() {
  
  if (iris_ == NULL) {
    iris_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.iris)
  return iris_;
}
::is::vision::CameraSetting* CameraSettings::release_iris() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.iris)
  
  ::is::vision::CameraSetting* temp = iris_;
  iris_ = NULL;
  return temp;
}
void CameraSettings::set_allocated_iris(::is::vision::CameraSetting* iris) {
  delete iris_;
  iris_ = iris;
  if (iris) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.iris)
}

// .is.vision.CameraSetting saturation = 8;
bool CameraSettings::has_saturation() const {
  return this != internal_default_instance() && saturation_ != NULL;
}
void CameraSettings::clear_saturation() {
  if (GetArenaNoVirtual() == NULL && saturation_ != NULL) delete saturation_;
  saturation_ = NULL;
}
const ::is::vision::CameraSetting& CameraSettings::saturation() const {
  const ::is::vision::CameraSetting* p = saturation_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.saturation)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
::is::vision::CameraSetting* CameraSettings::mutable_saturation() {
  
  if (saturation_ == NULL) {
    saturation_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.saturation)
  return saturation_;
}
::is::vision::CameraSetting* CameraSettings::release_saturation() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.saturation)
  
  ::is::vision::CameraSetting* temp = saturation_;
  saturation_ = NULL;
  return temp;
}
void CameraSettings::set_allocated_saturation(::is::vision::CameraSetting* saturation) {
  delete saturation_;
  saturation_ = saturation;
  if (saturation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.saturation)
}

// .is.vision.CameraSetting sharpness = 9;
bool CameraSettings::has_sharpness() const {
  return this != internal_default_instance() && sharpness_ != NULL;
}
void CameraSettings::clear_sharpness() {
  if (GetArenaNoVirtual() == NULL && sharpness_ != NULL) delete sharpness_;
  sharpness_ = NULL;
}
const ::is::vision::CameraSetting& CameraSettings::sharpness() const {
  const ::is::vision::CameraSetting* p = sharpness_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.sharpness)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
::is::vision::CameraSetting* CameraSettings::mutable_sharpness() {
  
  if (sharpness_ == NULL) {
    sharpness_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.sharpness)
  return sharpness_;
}
::is::vision::CameraSetting* CameraSettings::release_sharpness() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.sharpness)
  
  ::is::vision::CameraSetting* temp = sharpness_;
  sharpness_ = NULL;
  return temp;
}
void CameraSettings::set_allocated_sharpness(::is::vision::CameraSetting* sharpness) {
  delete sharpness_;
  sharpness_ = sharpness;
  if (sharpness) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.sharpness)
}

// .is.vision.CameraSetting shutter = 10;
bool CameraSettings::has_shutter() const {
  return this != internal_default_instance() && shutter_ != NULL;
}
void CameraSettings::clear_shutter() {
  if (GetArenaNoVirtual() == NULL && shutter_ != NULL) delete shutter_;
  shutter_ = NULL;
}
const ::is::vision::CameraSetting& CameraSettings::shutter() const {
  const ::is::vision::CameraSetting* p = shutter_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.shutter)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
::is::vision::CameraSetting* CameraSettings::mutable_shutter() {
  
  if (shutter_ == NULL) {
    shutter_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.shutter)
  return shutter_;
}
::is::vision::CameraSetting* CameraSettings::release_shutter() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.shutter)
  
  ::is::vision::CameraSetting* temp = shutter_;
  shutter_ = NULL;
  return temp;
}
void CameraSettings::set_allocated_shutter(::is::vision::CameraSetting* shutter) {
  delete shutter_;
  shutter_ = shutter;
  if (shutter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.shutter)
}

// .is.vision.CameraSetting white_balance_bu = 11;
bool CameraSettings::has_white_balance_bu() const {
  return this != internal_default_instance() && white_balance_bu_ != NULL;
}
void CameraSettings::clear_white_balance_bu() {
  if (GetArenaNoVirtual() == NULL && white_balance_bu_ != NULL) delete white_balance_bu_;
  white_balance_bu_ = NULL;
}
const ::is::vision::CameraSetting& CameraSettings::white_balance_bu() const {
  const ::is::vision::CameraSetting* p = white_balance_bu_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.white_balance_bu)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
::is::vision::CameraSetting* CameraSettings::mutable_white_balance_bu() {
  
  if (white_balance_bu_ == NULL) {
    white_balance_bu_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.white_balance_bu)
  return white_balance_bu_;
}
::is::vision::CameraSetting* CameraSettings::release_white_balance_bu() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.white_balance_bu)
  
  ::is::vision::CameraSetting* temp = white_balance_bu_;
  white_balance_bu_ = NULL;
  return temp;
}
void CameraSettings::set_allocated_white_balance_bu(::is::vision::CameraSetting* white_balance_bu) {
  delete white_balance_bu_;
  white_balance_bu_ = white_balance_bu;
  if (white_balance_bu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.white_balance_bu)
}

// .is.vision.CameraSetting white_balance_rv = 12;
bool CameraSettings::has_white_balance_rv() const {
  return this != internal_default_instance() && white_balance_rv_ != NULL;
}
void CameraSettings::clear_white_balance_rv() {
  if (GetArenaNoVirtual() == NULL && white_balance_rv_ != NULL) delete white_balance_rv_;
  white_balance_rv_ = NULL;
}
const ::is::vision::CameraSetting& CameraSettings::white_balance_rv() const {
  const ::is::vision::CameraSetting* p = white_balance_rv_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.white_balance_rv)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
::is::vision::CameraSetting* CameraSettings::mutable_white_balance_rv() {
  
  if (white_balance_rv_ == NULL) {
    white_balance_rv_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.white_balance_rv)
  return white_balance_rv_;
}
::is::vision::CameraSetting* CameraSettings::release_white_balance_rv() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.white_balance_rv)
  
  ::is::vision::CameraSetting* temp = white_balance_rv_;
  white_balance_rv_ = NULL;
  return temp;
}
void CameraSettings::set_allocated_white_balance_rv(::is::vision::CameraSetting* white_balance_rv) {
  delete white_balance_rv_;
  white_balance_rv_ = white_balance_rv;
  if (white_balance_rv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.white_balance_rv)
}

// .is.vision.CameraSetting zoom = 13;
bool CameraSettings::has_zoom() const {
  return this != internal_default_instance() && zoom_ != NULL;
}
void CameraSettings::clear_zoom() {
  if (GetArenaNoVirtual() == NULL && zoom_ != NULL) delete zoom_;
  zoom_ = NULL;
}
const ::is::vision::CameraSetting& CameraSettings::zoom() const {
  const ::is::vision::CameraSetting* p = zoom_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.zoom)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
::is::vision::CameraSetting* CameraSettings::mutable_zoom() {
  
  if (zoom_ == NULL) {
    zoom_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.zoom)
  return zoom_;
}
::is::vision::CameraSetting* CameraSettings::release_zoom() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.zoom)
  
  ::is::vision::CameraSetting* temp = zoom_;
  zoom_ = NULL;
  return temp;
}
void CameraSettings::set_allocated_zoom(::is::vision::CameraSetting* zoom) {
  delete zoom_;
  zoom_ = zoom;
  if (zoom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.zoom)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraConfig::kSamplingFieldNumber;
const int CameraConfig::kImageFieldNumber;
const int CameraConfig::kCameraFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraConfig::CameraConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_camera_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:is.vision.CameraConfig)
}
CameraConfig::CameraConfig(const CameraConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sampling()) {
    sampling_ = new ::is::common::SamplingSettings(*from.sampling_);
  } else {
    sampling_ = NULL;
  }
  if (from.has_image()) {
    image_ = new ::is::vision::ImageSettings(*from.image_);
  } else {
    image_ = NULL;
  }
  if (from.has_camera()) {
    camera_ = new ::is::vision::CameraSettings(*from.camera_);
  } else {
    camera_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:is.vision.CameraConfig)
}

void CameraConfig::SharedCtor() {
  ::memset(&sampling_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_) -
      reinterpret_cast<char*>(&sampling_)) + sizeof(camera_));
  _cached_size_ = 0;
}

CameraConfig::~CameraConfig() {
  // @@protoc_insertion_point(destructor:is.vision.CameraConfig)
  SharedDtor();
}

void CameraConfig::SharedDtor() {
  if (this != internal_default_instance()) delete sampling_;
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete camera_;
}

void CameraConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraConfig::descriptor() {
  protobuf_camera_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_camera_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraConfig& CameraConfig::default_instance() {
  protobuf_camera_2eproto::InitDefaults();
  return *internal_default_instance();
}

CameraConfig* CameraConfig::New(::google::protobuf::Arena* arena) const {
  CameraConfig* n = new CameraConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:is.vision.CameraConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sampling_ != NULL) {
    delete sampling_;
  }
  sampling_ = NULL;
  if (GetArenaNoVirtual() == NULL && image_ != NULL) {
    delete image_;
  }
  image_ = NULL;
  if (GetArenaNoVirtual() == NULL && camera_ != NULL) {
    delete camera_;
  }
  camera_ = NULL;
  _internal_metadata_.Clear();
}

bool CameraConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:is.vision.CameraConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .is.common.SamplingSettings sampling = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sampling()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .is.vision.ImageSettings image = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .is.vision.CameraSettings camera = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:is.vision.CameraConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:is.vision.CameraConfig)
  return false;
#undef DO_
}

void CameraConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:is.vision.CameraConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .is.common.SamplingSettings sampling = 1;
  if (this->has_sampling()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sampling_, output);
  }

  // .is.vision.ImageSettings image = 2;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->image_, output);
  }

  // .is.vision.CameraSettings camera = 3;
  if (this->has_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->camera_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:is.vision.CameraConfig)
}

::google::protobuf::uint8* CameraConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:is.vision.CameraConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .is.common.SamplingSettings sampling = 1;
  if (this->has_sampling()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->sampling_, deterministic, target);
  }

  // .is.vision.ImageSettings image = 2;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->image_, deterministic, target);
  }

  // .is.vision.CameraSettings camera = 3;
  if (this->has_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->camera_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:is.vision.CameraConfig)
  return target;
}

size_t CameraConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:is.vision.CameraConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .is.common.SamplingSettings sampling = 1;
  if (this->has_sampling()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sampling_);
  }

  // .is.vision.ImageSettings image = 2;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  // .is.vision.CameraSettings camera = 3;
  if (this->has_camera()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->camera_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:is.vision.CameraConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:is.vision.CameraConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:is.vision.CameraConfig)
    MergeFrom(*source);
  }
}

void CameraConfig::MergeFrom(const CameraConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:is.vision.CameraConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sampling()) {
    mutable_sampling()->::is::common::SamplingSettings::MergeFrom(from.sampling());
  }
  if (from.has_image()) {
    mutable_image()->::is::vision::ImageSettings::MergeFrom(from.image());
  }
  if (from.has_camera()) {
    mutable_camera()->::is::vision::CameraSettings::MergeFrom(from.camera());
  }
}

void CameraConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:is.vision.CameraConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraConfig::CopyFrom(const CameraConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:is.vision.CameraConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraConfig::IsInitialized() const {
  return true;
}

void CameraConfig::Swap(CameraConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraConfig::InternalSwap(CameraConfig* other) {
  using std::swap;
  swap(sampling_, other->sampling_);
  swap(image_, other->image_);
  swap(camera_, other->camera_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraConfig::GetMetadata() const {
  protobuf_camera_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_camera_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraConfig

// .is.common.SamplingSettings sampling = 1;
bool CameraConfig::has_sampling() const {
  return this != internal_default_instance() && sampling_ != NULL;
}
void CameraConfig::clear_sampling() {
  if (GetArenaNoVirtual() == NULL && sampling_ != NULL) delete sampling_;
  sampling_ = NULL;
}
const ::is::common::SamplingSettings& CameraConfig::sampling() const {
  const ::is::common::SamplingSettings* p = sampling_;
  // @@protoc_insertion_point(field_get:is.vision.CameraConfig.sampling)
  return p != NULL ? *p : *reinterpret_cast<const ::is::common::SamplingSettings*>(
      &::is::common::_SamplingSettings_default_instance_);
}
::is::common::SamplingSettings* CameraConfig::mutable_sampling() {
  
  if (sampling_ == NULL) {
    sampling_ = new ::is::common::SamplingSettings;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraConfig.sampling)
  return sampling_;
}
::is::common::SamplingSettings* CameraConfig::release_sampling() {
  // @@protoc_insertion_point(field_release:is.vision.CameraConfig.sampling)
  
  ::is::common::SamplingSettings* temp = sampling_;
  sampling_ = NULL;
  return temp;
}
void CameraConfig::set_allocated_sampling(::is::common::SamplingSettings* sampling) {
  delete sampling_;
  sampling_ = sampling;
  if (sampling) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraConfig.sampling)
}

// .is.vision.ImageSettings image = 2;
bool CameraConfig::has_image() const {
  return this != internal_default_instance() && image_ != NULL;
}
void CameraConfig::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
const ::is::vision::ImageSettings& CameraConfig::image() const {
  const ::is::vision::ImageSettings* p = image_;
  // @@protoc_insertion_point(field_get:is.vision.CameraConfig.image)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::ImageSettings*>(
      &::is::vision::_ImageSettings_default_instance_);
}
::is::vision::ImageSettings* CameraConfig::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::is::vision::ImageSettings;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraConfig.image)
  return image_;
}
::is::vision::ImageSettings* CameraConfig::release_image() {
  // @@protoc_insertion_point(field_release:is.vision.CameraConfig.image)
  
  ::is::vision::ImageSettings* temp = image_;
  image_ = NULL;
  return temp;
}
void CameraConfig::set_allocated_image(::is::vision::ImageSettings* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraConfig.image)
}

// .is.vision.CameraSettings camera = 3;
bool CameraConfig::has_camera() const {
  return this != internal_default_instance() && camera_ != NULL;
}
void CameraConfig::clear_camera() {
  if (GetArenaNoVirtual() == NULL && camera_ != NULL) delete camera_;
  camera_ = NULL;
}
const ::is::vision::CameraSettings& CameraConfig::camera() const {
  const ::is::vision::CameraSettings* p = camera_;
  // @@protoc_insertion_point(field_get:is.vision.CameraConfig.camera)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSettings*>(
      &::is::vision::_CameraSettings_default_instance_);
}
::is::vision::CameraSettings* CameraConfig::mutable_camera() {
  
  if (camera_ == NULL) {
    camera_ = new ::is::vision::CameraSettings;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraConfig.camera)
  return camera_;
}
::is::vision::CameraSettings* CameraConfig::release_camera() {
  // @@protoc_insertion_point(field_release:is.vision.CameraConfig.camera)
  
  ::is::vision::CameraSettings* temp = camera_;
  camera_ = NULL;
  return temp;
}
void CameraConfig::set_allocated_camera(::is::vision::CameraSettings* camera) {
  delete camera_;
  camera_ = camera;
  if (camera) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraConfig.camera)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraCalibration::CameraCalibration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_camera_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:is.vision.CameraCalibration)
}
CameraCalibration::CameraCalibration(const CameraCalibration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:is.vision.CameraCalibration)
}

void CameraCalibration::SharedCtor() {
  _cached_size_ = 0;
}

CameraCalibration::~CameraCalibration() {
  // @@protoc_insertion_point(destructor:is.vision.CameraCalibration)
  SharedDtor();
}

void CameraCalibration::SharedDtor() {
}

void CameraCalibration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraCalibration::descriptor() {
  protobuf_camera_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_camera_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraCalibration& CameraCalibration::default_instance() {
  protobuf_camera_2eproto::InitDefaults();
  return *internal_default_instance();
}

CameraCalibration* CameraCalibration::New(::google::protobuf::Arena* arena) const {
  CameraCalibration* n = new CameraCalibration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraCalibration::Clear() {
// @@protoc_insertion_point(message_clear_start:is.vision.CameraCalibration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool CameraCalibration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:is.vision.CameraCalibration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:is.vision.CameraCalibration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:is.vision.CameraCalibration)
  return false;
#undef DO_
}

void CameraCalibration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:is.vision.CameraCalibration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:is.vision.CameraCalibration)
}

::google::protobuf::uint8* CameraCalibration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:is.vision.CameraCalibration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:is.vision.CameraCalibration)
  return target;
}

size_t CameraCalibration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:is.vision.CameraCalibration)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraCalibration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:is.vision.CameraCalibration)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraCalibration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraCalibration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:is.vision.CameraCalibration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:is.vision.CameraCalibration)
    MergeFrom(*source);
  }
}

void CameraCalibration::MergeFrom(const CameraCalibration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:is.vision.CameraCalibration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CameraCalibration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:is.vision.CameraCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraCalibration::CopyFrom(const CameraCalibration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:is.vision.CameraCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraCalibration::IsInitialized() const {
  return true;
}

void CameraCalibration::Swap(CameraCalibration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraCalibration::InternalSwap(CameraCalibration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraCalibration::GetMetadata() const {
  protobuf_camera_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_camera_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraCalibration

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace vision
}  // namespace is

// @@protoc_insertion_point(global_scope)
