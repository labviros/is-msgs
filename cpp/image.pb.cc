// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "image.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace is {
namespace vision {
class ImageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Image>
     _instance;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
} _Image_default_instance_;
class VertexDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Vertex>
     _instance;
} _Vertex_default_instance_;
class BoundingBoxDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BoundingBox>
     _instance;
} _BoundingBox_default_instance_;
class ResolutionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Resolution>
     _instance;
} _Resolution_default_instance_;
class ImageSettingsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageSettings>
     _instance;
} _ImageSettings_default_instance_;

namespace protobuf_image_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(ImageDefaultTypeInternal, data_),
  offsetof(ImageDefaultTypeInternal, uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, content_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBox, width_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resolution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resolution, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resolution, width_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageSettings, resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageSettings, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageSettings, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageSettings, roi_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Image)},
  { 8, -1, sizeof(Vertex)},
  { 15, -1, sizeof(BoundingBox)},
  { 24, -1, sizeof(Resolution)},
  { 31, -1, sizeof(ImageSettings)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Image_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vertex_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BoundingBox_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Resolution_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImageSettings_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "image.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Image_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Image_default_instance_);_Vertex_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Vertex_default_instance_);_BoundingBox_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BoundingBox_default_instance_);_Resolution_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Resolution_default_instance_);_ImageSettings_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageSettings_default_instance_);_Image_default_instance_.data_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _Image_default_instance_.uri_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _ImageSettings_default_instance_._instance.get_mutable()->resolution_ = const_cast< ::is::vision::Resolution*>(
      ::is::vision::Resolution::internal_default_instance());
  _ImageSettings_default_instance_._instance.get_mutable()->roi_ = const_cast< ::is::vision::BoundingBox*>(
      ::is::vision::BoundingBox::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013image.proto\022\tis.vision\"1\n\005Image\022\016\n\004dat"
      "a\030\001 \001(\014H\000\022\r\n\003uri\030\002 \001(\tH\000B\t\n\007content\"\036\n\006V"
      "ertex\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002 \001(\r\"B\n\013BoundingB"
      "ox\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002 \001(\r\022\016\n\006height\030\003 \001(\r"
      "\022\r\n\005width\030\004 \001(\r\"+\n\nResolution\022\016\n\006height\030"
      "\001 \001(\r\022\r\n\005width\030\002 \001(\r\"\255\001\n\rImageSettings\022)"
      "\n\nresolution\030\001 \001(\0132\025.is.vision.Resolutio"
      "n\022&\n\006format\030\002 \001(\0162\026.is.vision.ImageForma"
      "t\022$\n\005color\030\003 \001(\0162\025.is.vision.ColorSpace\022"
      "#\n\003roi\030\004 \001(\0132\026.is.vision.BoundingBox**\n\013"
      "ImageFormat\022\007\n\003PNG\020\000\022\010\n\004JPEG\020\001\022\010\n\004WebP\020\002"
      "*3\n\nColorSpace\022\007\n\003RGB\020\000\022\010\n\004GRAY\020\001\022\t\n\005YCr"
      "Cb\020\002\022\007\n\003HSV\020\003B\017\n\rcom.is.visionb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 518);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "image.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_image_2eproto

const ::google::protobuf::EnumDescriptor* ImageFormat_descriptor() {
  protobuf_image_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_2eproto::file_level_enum_descriptors[0];
}
bool ImageFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ColorSpace_descriptor() {
  protobuf_image_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_2eproto::file_level_enum_descriptors[1];
}
bool ColorSpace_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Image::kDataFieldNumber;
const int Image::kUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Image::Image()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:is.vision.Image)
}
Image::Image(const Image& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_content();
  switch (from.content_case()) {
    case kData: {
      set_data(from.data());
      break;
    }
    case kUri: {
      set_uri(from.uri());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:is.vision.Image)
}

void Image::SharedCtor() {
  clear_has_content();
  _cached_size_ = 0;
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:is.vision.Image)
  SharedDtor();
}

void Image::SharedDtor() {
  if (has_content()) {
    clear_content();
  }
}

void Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  protobuf_image_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Image& Image::default_instance() {
  protobuf_image_2eproto::InitDefaults();
  return *internal_default_instance();
}

Image* Image::New(::google::protobuf::Arena* arena) const {
  Image* n = new Image;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Image::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:is.vision.Image)
  switch (content_case()) {
    case kData: {
      content_.data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kUri: {
      content_.uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:is.vision.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_content();
  _internal_metadata_.Clear();
}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:is.vision.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uri = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "is.vision.Image.uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:is.vision.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:is.vision.Image)
  return false;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:is.vision.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // string uri = 2;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "is.vision.Image.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uri(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:is.vision.Image)
}

::google::protobuf::uint8* Image::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:is.vision.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // string uri = 2;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "is.vision.Image.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uri(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:is.vision.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:is.vision.Image)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (content_case()) {
    // bytes data = 1;
    case kData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
      break;
    }
    // string uri = 2;
    case kUri: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:is.vision.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Image* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Image>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:is.vision.Image)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:is.vision.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:is.vision.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.content_case()) {
    case kData: {
      set_data(from.data());
      break;
    }
    case kUri: {
      set_uri(from.uri());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:is.vision.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:is.vision.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::Swap(Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Image::InternalSwap(Image* other) {
  using std::swap;
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_image_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Image

// bytes data = 1;
bool Image::has_data() const {
  return content_case() == kData;
}
void Image::set_has_data() {
  _oneof_case_[0] = kData;
}
void Image::clear_data() {
  if (has_data()) {
    content_.data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_content();
  }
}
const ::std::string& Image::data() const {
  // @@protoc_insertion_point(field_get:is.vision.Image.data)
  if (has_data()) {
    return content_.data_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Image::set_data(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:is.vision.Image.data)
  if (!has_data()) {
    clear_content();
    set_has_data();
    content_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:is.vision.Image.data)
}
#if LANG_CXX11
void Image::set_data(::std::string&& value) {
  // @@protoc_insertion_point(field_set:is.vision.Image.data)
  if (!has_data()) {
    clear_content();
    set_has_data();
    content_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:is.vision.Image.data)
}
#endif
void Image::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_data()) {
    clear_content();
    set_has_data();
    content_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:is.vision.Image.data)
}
void Image::set_data(const void* value, size_t size) {
  if (!has_data()) {
    clear_content();
    set_has_data();
    content_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:is.vision.Image.data)
}
::std::string* Image::mutable_data() {
  if (!has_data()) {
    clear_content();
    set_has_data();
    content_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:is.vision.Image.data)
  return content_.data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Image::release_data() {
  // @@protoc_insertion_point(field_release:is.vision.Image.data)
  if (has_data()) {
    clear_has_content();
    return content_.data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Image::set_allocated_data(::std::string* data) {
  if (!has_data()) {
    content_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_content();
  if (data != NULL) {
    set_has_data();
    content_.data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        data);
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.Image.data)
}

// string uri = 2;
bool Image::has_uri() const {
  return content_case() == kUri;
}
void Image::set_has_uri() {
  _oneof_case_[0] = kUri;
}
void Image::clear_uri() {
  if (has_uri()) {
    content_.uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_content();
  }
}
const ::std::string& Image::uri() const {
  // @@protoc_insertion_point(field_get:is.vision.Image.uri)
  if (has_uri()) {
    return content_.uri_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Image::set_uri(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:is.vision.Image.uri)
  if (!has_uri()) {
    clear_content();
    set_has_uri();
    content_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:is.vision.Image.uri)
}
#if LANG_CXX11
void Image::set_uri(::std::string&& value) {
  // @@protoc_insertion_point(field_set:is.vision.Image.uri)
  if (!has_uri()) {
    clear_content();
    set_has_uri();
    content_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:is.vision.Image.uri)
}
#endif
void Image::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_uri()) {
    clear_content();
    set_has_uri();
    content_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:is.vision.Image.uri)
}
void Image::set_uri(const char* value, size_t size) {
  if (!has_uri()) {
    clear_content();
    set_has_uri();
    content_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:is.vision.Image.uri)
}
::std::string* Image::mutable_uri() {
  if (!has_uri()) {
    clear_content();
    set_has_uri();
    content_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:is.vision.Image.uri)
  return content_.uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Image::release_uri() {
  // @@protoc_insertion_point(field_release:is.vision.Image.uri)
  if (has_uri()) {
    clear_has_content();
    return content_.uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Image::set_allocated_uri(::std::string* uri) {
  if (!has_uri()) {
    content_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_content();
  if (uri != NULL) {
    set_has_uri();
    content_.uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        uri);
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.Image.uri)
}

bool Image::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
void Image::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
Image::ContentCase Image::content_case() const {
  return Image::ContentCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vertex::kXFieldNumber;
const int Vertex::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vertex::Vertex()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:is.vision.Vertex)
}
Vertex::Vertex(const Vertex& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:is.vision.Vertex)
}

void Vertex::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _cached_size_ = 0;
}

Vertex::~Vertex() {
  // @@protoc_insertion_point(destructor:is.vision.Vertex)
  SharedDtor();
}

void Vertex::SharedDtor() {
}

void Vertex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vertex::descriptor() {
  protobuf_image_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vertex& Vertex::default_instance() {
  protobuf_image_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vertex* Vertex::New(::google::protobuf::Arena* arena) const {
  Vertex* n = new Vertex;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vertex::Clear() {
// @@protoc_insertion_point(message_clear_start:is.vision.Vertex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool Vertex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:is.vision.Vertex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:is.vision.Vertex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:is.vision.Vertex)
  return false;
#undef DO_
}

void Vertex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:is.vision.Vertex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:is.vision.Vertex)
}

::google::protobuf::uint8* Vertex::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:is.vision.Vertex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:is.vision.Vertex)
  return target;
}

size_t Vertex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:is.vision.Vertex)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x());
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vertex::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:is.vision.Vertex)
  GOOGLE_DCHECK_NE(&from, this);
  const Vertex* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vertex>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:is.vision.Vertex)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:is.vision.Vertex)
    MergeFrom(*source);
  }
}

void Vertex::MergeFrom(const Vertex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:is.vision.Vertex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Vertex::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:is.vision.Vertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vertex::CopyFrom(const Vertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:is.vision.Vertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vertex::IsInitialized() const {
  return true;
}

void Vertex::Swap(Vertex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vertex::InternalSwap(Vertex* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vertex::GetMetadata() const {
  protobuf_image_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vertex

// uint32 x = 1;
void Vertex::clear_x() {
  x_ = 0u;
}
::google::protobuf::uint32 Vertex::x() const {
  // @@protoc_insertion_point(field_get:is.vision.Vertex.x)
  return x_;
}
void Vertex::set_x(::google::protobuf::uint32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:is.vision.Vertex.x)
}

// uint32 y = 2;
void Vertex::clear_y() {
  y_ = 0u;
}
::google::protobuf::uint32 Vertex::y() const {
  // @@protoc_insertion_point(field_get:is.vision.Vertex.y)
  return y_;
}
void Vertex::set_y(::google::protobuf::uint32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:is.vision.Vertex.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoundingBox::kXFieldNumber;
const int BoundingBox::kYFieldNumber;
const int BoundingBox::kHeightFieldNumber;
const int BoundingBox::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoundingBox::BoundingBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:is.vision.BoundingBox)
}
BoundingBox::BoundingBox(const BoundingBox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&x_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:is.vision.BoundingBox)
}

void BoundingBox::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&x_)) + sizeof(width_));
  _cached_size_ = 0;
}

BoundingBox::~BoundingBox() {
  // @@protoc_insertion_point(destructor:is.vision.BoundingBox)
  SharedDtor();
}

void BoundingBox::SharedDtor() {
}

void BoundingBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundingBox::descriptor() {
  protobuf_image_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BoundingBox& BoundingBox::default_instance() {
  protobuf_image_2eproto::InitDefaults();
  return *internal_default_instance();
}

BoundingBox* BoundingBox::New(::google::protobuf::Arena* arena) const {
  BoundingBox* n = new BoundingBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:is.vision.BoundingBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&x_)) + sizeof(width_));
  _internal_metadata_.Clear();
}

bool BoundingBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:is.vision.BoundingBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:is.vision.BoundingBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:is.vision.BoundingBox)
  return false;
#undef DO_
}

void BoundingBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:is.vision.BoundingBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // uint32 width = 4;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->width(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:is.vision.BoundingBox)
}

::google::protobuf::uint8* BoundingBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:is.vision.BoundingBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // uint32 width = 4;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->width(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:is.vision.BoundingBox)
  return target;
}

size_t BoundingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:is.vision.BoundingBox)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x());
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->y());
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  // uint32 width = 4;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundingBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:is.vision.BoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundingBox* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoundingBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:is.vision.BoundingBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:is.vision.BoundingBox)
    MergeFrom(*source);
  }
}

void BoundingBox::MergeFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:is.vision.BoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
}

void BoundingBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:is.vision.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundingBox::CopyFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:is.vision.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox::IsInitialized() const {
  return true;
}

void BoundingBox::Swap(BoundingBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoundingBox::InternalSwap(BoundingBox* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoundingBox::GetMetadata() const {
  protobuf_image_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoundingBox

// uint32 x = 1;
void BoundingBox::clear_x() {
  x_ = 0u;
}
::google::protobuf::uint32 BoundingBox::x() const {
  // @@protoc_insertion_point(field_get:is.vision.BoundingBox.x)
  return x_;
}
void BoundingBox::set_x(::google::protobuf::uint32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:is.vision.BoundingBox.x)
}

// uint32 y = 2;
void BoundingBox::clear_y() {
  y_ = 0u;
}
::google::protobuf::uint32 BoundingBox::y() const {
  // @@protoc_insertion_point(field_get:is.vision.BoundingBox.y)
  return y_;
}
void BoundingBox::set_y(::google::protobuf::uint32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:is.vision.BoundingBox.y)
}

// uint32 height = 3;
void BoundingBox::clear_height() {
  height_ = 0u;
}
::google::protobuf::uint32 BoundingBox::height() const {
  // @@protoc_insertion_point(field_get:is.vision.BoundingBox.height)
  return height_;
}
void BoundingBox::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:is.vision.BoundingBox.height)
}

// uint32 width = 4;
void BoundingBox::clear_width() {
  width_ = 0u;
}
::google::protobuf::uint32 BoundingBox::width() const {
  // @@protoc_insertion_point(field_get:is.vision.BoundingBox.width)
  return width_;
}
void BoundingBox::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:is.vision.BoundingBox.width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Resolution::kHeightFieldNumber;
const int Resolution::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Resolution::Resolution()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:is.vision.Resolution)
}
Resolution::Resolution(const Resolution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&height_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:is.vision.Resolution)
}

void Resolution::SharedCtor() {
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&height_)) + sizeof(width_));
  _cached_size_ = 0;
}

Resolution::~Resolution() {
  // @@protoc_insertion_point(destructor:is.vision.Resolution)
  SharedDtor();
}

void Resolution::SharedDtor() {
}

void Resolution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resolution::descriptor() {
  protobuf_image_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Resolution& Resolution::default_instance() {
  protobuf_image_2eproto::InitDefaults();
  return *internal_default_instance();
}

Resolution* Resolution::New(::google::protobuf::Arena* arena) const {
  Resolution* n = new Resolution;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Resolution::Clear() {
// @@protoc_insertion_point(message_clear_start:is.vision.Resolution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&height_)) + sizeof(width_));
  _internal_metadata_.Clear();
}

bool Resolution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:is.vision.Resolution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 height = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:is.vision.Resolution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:is.vision.Resolution)
  return false;
#undef DO_
}

void Resolution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:is.vision.Resolution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 height = 1;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->height(), output);
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:is.vision.Resolution)
}

::google::protobuf::uint8* Resolution::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:is.vision.Resolution)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 height = 1;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->height(), target);
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:is.vision.Resolution)
  return target;
}

size_t Resolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:is.vision.Resolution)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resolution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:is.vision.Resolution)
  GOOGLE_DCHECK_NE(&from, this);
  const Resolution* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Resolution>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:is.vision.Resolution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:is.vision.Resolution)
    MergeFrom(*source);
  }
}

void Resolution::MergeFrom(const Resolution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:is.vision.Resolution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
}

void Resolution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:is.vision.Resolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resolution::CopyFrom(const Resolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:is.vision.Resolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resolution::IsInitialized() const {
  return true;
}

void Resolution::Swap(Resolution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Resolution::InternalSwap(Resolution* other) {
  using std::swap;
  swap(height_, other->height_);
  swap(width_, other->width_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Resolution::GetMetadata() const {
  protobuf_image_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Resolution

// uint32 height = 1;
void Resolution::clear_height() {
  height_ = 0u;
}
::google::protobuf::uint32 Resolution::height() const {
  // @@protoc_insertion_point(field_get:is.vision.Resolution.height)
  return height_;
}
void Resolution::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:is.vision.Resolution.height)
}

// uint32 width = 2;
void Resolution::clear_width() {
  width_ = 0u;
}
::google::protobuf::uint32 Resolution::width() const {
  // @@protoc_insertion_point(field_get:is.vision.Resolution.width)
  return width_;
}
void Resolution::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:is.vision.Resolution.width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageSettings::kResolutionFieldNumber;
const int ImageSettings::kFormatFieldNumber;
const int ImageSettings::kColorFieldNumber;
const int ImageSettings::kRoiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageSettings::ImageSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_image_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:is.vision.ImageSettings)
}
ImageSettings::ImageSettings(const ImageSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_resolution()) {
    resolution_ = new ::is::vision::Resolution(*from.resolution_);
  } else {
    resolution_ = NULL;
  }
  if (from.has_roi()) {
    roi_ = new ::is::vision::BoundingBox(*from.roi_);
  } else {
    roi_ = NULL;
  }
  ::memcpy(&format_, &from.format_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&format_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:is.vision.ImageSettings)
}

void ImageSettings::SharedCtor() {
  ::memset(&resolution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&resolution_)) + sizeof(color_));
  _cached_size_ = 0;
}

ImageSettings::~ImageSettings() {
  // @@protoc_insertion_point(destructor:is.vision.ImageSettings)
  SharedDtor();
}

void ImageSettings::SharedDtor() {
  if (this != internal_default_instance()) delete resolution_;
  if (this != internal_default_instance()) delete roi_;
}

void ImageSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageSettings::descriptor() {
  protobuf_image_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageSettings& ImageSettings::default_instance() {
  protobuf_image_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageSettings* ImageSettings::New(::google::protobuf::Arena* arena) const {
  ImageSettings* n = new ImageSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:is.vision.ImageSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && resolution_ != NULL) {
    delete resolution_;
  }
  resolution_ = NULL;
  if (GetArenaNoVirtual() == NULL && roi_ != NULL) {
    delete roi_;
  }
  roi_ = NULL;
  ::memset(&format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&format_)) + sizeof(color_));
  _internal_metadata_.Clear();
}

bool ImageSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:is.vision.ImageSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .is.vision.Resolution resolution = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resolution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .is.vision.ImageFormat format = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_format(static_cast< ::is::vision::ImageFormat >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .is.vision.ColorSpace color = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_color(static_cast< ::is::vision::ColorSpace >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .is.vision.BoundingBox roi = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:is.vision.ImageSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:is.vision.ImageSettings)
  return false;
#undef DO_
}

void ImageSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:is.vision.ImageSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .is.vision.Resolution resolution = 1;
  if (this->has_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->resolution_, output);
  }

  // .is.vision.ImageFormat format = 2;
  if (this->format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->format(), output);
  }

  // .is.vision.ColorSpace color = 3;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->color(), output);
  }

  // .is.vision.BoundingBox roi = 4;
  if (this->has_roi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->roi_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:is.vision.ImageSettings)
}

::google::protobuf::uint8* ImageSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:is.vision.ImageSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .is.vision.Resolution resolution = 1;
  if (this->has_resolution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->resolution_, deterministic, target);
  }

  // .is.vision.ImageFormat format = 2;
  if (this->format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->format(), target);
  }

  // .is.vision.ColorSpace color = 3;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->color(), target);
  }

  // .is.vision.BoundingBox roi = 4;
  if (this->has_roi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->roi_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:is.vision.ImageSettings)
  return target;
}

size_t ImageSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:is.vision.ImageSettings)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .is.vision.Resolution resolution = 1;
  if (this->has_resolution()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resolution_);
  }

  // .is.vision.BoundingBox roi = 4;
  if (this->has_roi()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->roi_);
  }

  // .is.vision.ImageFormat format = 2;
  if (this->format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
  }

  // .is.vision.ColorSpace color = 3;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:is.vision.ImageSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:is.vision.ImageSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:is.vision.ImageSettings)
    MergeFrom(*source);
  }
}

void ImageSettings::MergeFrom(const ImageSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:is.vision.ImageSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_resolution()) {
    mutable_resolution()->::is::vision::Resolution::MergeFrom(from.resolution());
  }
  if (from.has_roi()) {
    mutable_roi()->::is::vision::BoundingBox::MergeFrom(from.roi());
  }
  if (from.format() != 0) {
    set_format(from.format());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
}

void ImageSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:is.vision.ImageSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageSettings::CopyFrom(const ImageSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:is.vision.ImageSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageSettings::IsInitialized() const {
  return true;
}

void ImageSettings::Swap(ImageSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageSettings::InternalSwap(ImageSettings* other) {
  using std::swap;
  swap(resolution_, other->resolution_);
  swap(roi_, other->roi_);
  swap(format_, other->format_);
  swap(color_, other->color_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageSettings::GetMetadata() const {
  protobuf_image_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_image_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageSettings

// .is.vision.Resolution resolution = 1;
bool ImageSettings::has_resolution() const {
  return this != internal_default_instance() && resolution_ != NULL;
}
void ImageSettings::clear_resolution() {
  if (GetArenaNoVirtual() == NULL && resolution_ != NULL) delete resolution_;
  resolution_ = NULL;
}
const ::is::vision::Resolution& ImageSettings::resolution() const {
  const ::is::vision::Resolution* p = resolution_;
  // @@protoc_insertion_point(field_get:is.vision.ImageSettings.resolution)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::Resolution*>(
      &::is::vision::_Resolution_default_instance_);
}
::is::vision::Resolution* ImageSettings::mutable_resolution() {
  
  if (resolution_ == NULL) {
    resolution_ = new ::is::vision::Resolution;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.ImageSettings.resolution)
  return resolution_;
}
::is::vision::Resolution* ImageSettings::release_resolution() {
  // @@protoc_insertion_point(field_release:is.vision.ImageSettings.resolution)
  
  ::is::vision::Resolution* temp = resolution_;
  resolution_ = NULL;
  return temp;
}
void ImageSettings::set_allocated_resolution(::is::vision::Resolution* resolution) {
  delete resolution_;
  resolution_ = resolution;
  if (resolution) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.ImageSettings.resolution)
}

// .is.vision.ImageFormat format = 2;
void ImageSettings::clear_format() {
  format_ = 0;
}
::is::vision::ImageFormat ImageSettings::format() const {
  // @@protoc_insertion_point(field_get:is.vision.ImageSettings.format)
  return static_cast< ::is::vision::ImageFormat >(format_);
}
void ImageSettings::set_format(::is::vision::ImageFormat value) {
  
  format_ = value;
  // @@protoc_insertion_point(field_set:is.vision.ImageSettings.format)
}

// .is.vision.ColorSpace color = 3;
void ImageSettings::clear_color() {
  color_ = 0;
}
::is::vision::ColorSpace ImageSettings::color() const {
  // @@protoc_insertion_point(field_get:is.vision.ImageSettings.color)
  return static_cast< ::is::vision::ColorSpace >(color_);
}
void ImageSettings::set_color(::is::vision::ColorSpace value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:is.vision.ImageSettings.color)
}

// .is.vision.BoundingBox roi = 4;
bool ImageSettings::has_roi() const {
  return this != internal_default_instance() && roi_ != NULL;
}
void ImageSettings::clear_roi() {
  if (GetArenaNoVirtual() == NULL && roi_ != NULL) delete roi_;
  roi_ = NULL;
}
const ::is::vision::BoundingBox& ImageSettings::roi() const {
  const ::is::vision::BoundingBox* p = roi_;
  // @@protoc_insertion_point(field_get:is.vision.ImageSettings.roi)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::BoundingBox*>(
      &::is::vision::_BoundingBox_default_instance_);
}
::is::vision::BoundingBox* ImageSettings::mutable_roi() {
  
  if (roi_ == NULL) {
    roi_ = new ::is::vision::BoundingBox;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.ImageSettings.roi)
  return roi_;
}
::is::vision::BoundingBox* ImageSettings::release_roi() {
  // @@protoc_insertion_point(field_release:is.vision.ImageSettings.roi)
  
  ::is::vision::BoundingBox* temp = roi_;
  roi_ = NULL;
  return temp;
}
void ImageSettings::set_allocated_roi(::is::vision::BoundingBox* roi) {
  delete roi_;
  roi_ = roi;
  if (roi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.ImageSettings.roi)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace vision
}  // namespace is

// @@protoc_insertion_point(global_scope)
