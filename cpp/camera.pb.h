// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera.proto

#ifndef PROTOBUF_camera_2eproto__INCLUDED
#define PROTOBUF_camera_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "image.pb.h"
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
namespace is {
namespace vision {
class CameraCalibration;
class CameraCalibrationDefaultTypeInternal;
extern CameraCalibrationDefaultTypeInternal _CameraCalibration_default_instance_;
class CameraConfig;
class CameraConfigDefaultTypeInternal;
extern CameraConfigDefaultTypeInternal _CameraConfig_default_instance_;
class CameraSetting;
class CameraSettingDefaultTypeInternal;
extern CameraSettingDefaultTypeInternal _CameraSetting_default_instance_;
class CameraSettings;
class CameraSettingsDefaultTypeInternal;
extern CameraSettingsDefaultTypeInternal _CameraSettings_default_instance_;
}  // namespace vision
}  // namespace is

namespace is {
namespace vision {

namespace protobuf_camera_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_camera_2eproto

enum CameraConfigFields {
  ALL = 0,
  SAMPLING_SETTINGS = 1,
  IMAGE_SETTINGS = 2,
  CAMERA_SETTINGS = 3,
  CameraConfigFields_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CameraConfigFields_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CameraConfigFields_IsValid(int value);
const CameraConfigFields CameraConfigFields_MIN = ALL;
const CameraConfigFields CameraConfigFields_MAX = CAMERA_SETTINGS;
const int CameraConfigFields_ARRAYSIZE = CameraConfigFields_MAX + 1;

const ::google::protobuf::EnumDescriptor* CameraConfigFields_descriptor();
inline const ::std::string& CameraConfigFields_Name(CameraConfigFields value) {
  return ::google::protobuf::internal::NameOfEnum(
    CameraConfigFields_descriptor(), value);
}
inline bool CameraConfigFields_Parse(
    const ::std::string& name, CameraConfigFields* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraConfigFields>(
    CameraConfigFields_descriptor(), name, value);
}
// ===================================================================

class CameraSetting : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:is.vision.CameraSetting) */ {
 public:
  CameraSetting();
  virtual ~CameraSetting();

  CameraSetting(const CameraSetting& from);

  inline CameraSetting& operator=(const CameraSetting& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraSetting(CameraSetting&& from) noexcept
    : CameraSetting() {
    *this = ::std::move(from);
  }

  inline CameraSetting& operator=(CameraSetting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraSetting& default_instance();

  static inline const CameraSetting* internal_default_instance() {
    return reinterpret_cast<const CameraSetting*>(
               &_CameraSetting_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CameraSetting* other);
  friend void swap(CameraSetting& a, CameraSetting& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraSetting* New() const PROTOBUF_FINAL { return New(NULL); }

  CameraSetting* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CameraSetting& from);
  void MergeFrom(const CameraSetting& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CameraSetting* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool automatic = 1;
  void clear_automatic();
  static const int kAutomaticFieldNumber = 1;
  bool automatic() const;
  void set_automatic(bool value);

  // float ratio = 2;
  void clear_ratio();
  static const int kRatioFieldNumber = 2;
  float ratio() const;
  void set_ratio(float value);

  // @@protoc_insertion_point(class_scope:is.vision.CameraSetting)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool automatic_;
  float ratio_;
  mutable int _cached_size_;
  friend struct protobuf_camera_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CameraSettings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:is.vision.CameraSettings) */ {
 public:
  CameraSettings();
  virtual ~CameraSettings();

  CameraSettings(const CameraSettings& from);

  inline CameraSettings& operator=(const CameraSettings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraSettings(CameraSettings&& from) noexcept
    : CameraSettings() {
    *this = ::std::move(from);
  }

  inline CameraSettings& operator=(CameraSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraSettings& default_instance();

  static inline const CameraSettings* internal_default_instance() {
    return reinterpret_cast<const CameraSettings*>(
               &_CameraSettings_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CameraSettings* other);
  friend void swap(CameraSettings& a, CameraSettings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraSettings* New() const PROTOBUF_FINAL { return New(NULL); }

  CameraSettings* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CameraSettings& from);
  void MergeFrom(const CameraSettings& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CameraSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .is.vision.CameraSetting brightness = 1;
  bool has_brightness() const;
  void clear_brightness();
  static const int kBrightnessFieldNumber = 1;
  const ::is::vision::CameraSetting& brightness() const;
  ::is::vision::CameraSetting* mutable_brightness();
  ::is::vision::CameraSetting* release_brightness();
  void set_allocated_brightness(::is::vision::CameraSetting* brightness);

  // .is.vision.CameraSetting exposure = 2;
  bool has_exposure() const;
  void clear_exposure();
  static const int kExposureFieldNumber = 2;
  const ::is::vision::CameraSetting& exposure() const;
  ::is::vision::CameraSetting* mutable_exposure();
  ::is::vision::CameraSetting* release_exposure();
  void set_allocated_exposure(::is::vision::CameraSetting* exposure);

  // .is.vision.CameraSetting focus = 3;
  bool has_focus() const;
  void clear_focus();
  static const int kFocusFieldNumber = 3;
  const ::is::vision::CameraSetting& focus() const;
  ::is::vision::CameraSetting* mutable_focus();
  ::is::vision::CameraSetting* release_focus();
  void set_allocated_focus(::is::vision::CameraSetting* focus);

  // .is.vision.CameraSetting gain = 4;
  bool has_gain() const;
  void clear_gain();
  static const int kGainFieldNumber = 4;
  const ::is::vision::CameraSetting& gain() const;
  ::is::vision::CameraSetting* mutable_gain();
  ::is::vision::CameraSetting* release_gain();
  void set_allocated_gain(::is::vision::CameraSetting* gain);

  // .is.vision.CameraSetting gamma = 5;
  bool has_gamma() const;
  void clear_gamma();
  static const int kGammaFieldNumber = 5;
  const ::is::vision::CameraSetting& gamma() const;
  ::is::vision::CameraSetting* mutable_gamma();
  ::is::vision::CameraSetting* release_gamma();
  void set_allocated_gamma(::is::vision::CameraSetting* gamma);

  // .is.vision.CameraSetting hue = 6;
  bool has_hue() const;
  void clear_hue();
  static const int kHueFieldNumber = 6;
  const ::is::vision::CameraSetting& hue() const;
  ::is::vision::CameraSetting* mutable_hue();
  ::is::vision::CameraSetting* release_hue();
  void set_allocated_hue(::is::vision::CameraSetting* hue);

  // .is.vision.CameraSetting iris = 7;
  bool has_iris() const;
  void clear_iris();
  static const int kIrisFieldNumber = 7;
  const ::is::vision::CameraSetting& iris() const;
  ::is::vision::CameraSetting* mutable_iris();
  ::is::vision::CameraSetting* release_iris();
  void set_allocated_iris(::is::vision::CameraSetting* iris);

  // .is.vision.CameraSetting saturation = 8;
  bool has_saturation() const;
  void clear_saturation();
  static const int kSaturationFieldNumber = 8;
  const ::is::vision::CameraSetting& saturation() const;
  ::is::vision::CameraSetting* mutable_saturation();
  ::is::vision::CameraSetting* release_saturation();
  void set_allocated_saturation(::is::vision::CameraSetting* saturation);

  // .is.vision.CameraSetting sharpness = 9;
  bool has_sharpness() const;
  void clear_sharpness();
  static const int kSharpnessFieldNumber = 9;
  const ::is::vision::CameraSetting& sharpness() const;
  ::is::vision::CameraSetting* mutable_sharpness();
  ::is::vision::CameraSetting* release_sharpness();
  void set_allocated_sharpness(::is::vision::CameraSetting* sharpness);

  // .is.vision.CameraSetting shutter = 10;
  bool has_shutter() const;
  void clear_shutter();
  static const int kShutterFieldNumber = 10;
  const ::is::vision::CameraSetting& shutter() const;
  ::is::vision::CameraSetting* mutable_shutter();
  ::is::vision::CameraSetting* release_shutter();
  void set_allocated_shutter(::is::vision::CameraSetting* shutter);

  // .is.vision.CameraSetting white_balance_bu = 11;
  bool has_white_balance_bu() const;
  void clear_white_balance_bu();
  static const int kWhiteBalanceBuFieldNumber = 11;
  const ::is::vision::CameraSetting& white_balance_bu() const;
  ::is::vision::CameraSetting* mutable_white_balance_bu();
  ::is::vision::CameraSetting* release_white_balance_bu();
  void set_allocated_white_balance_bu(::is::vision::CameraSetting* white_balance_bu);

  // .is.vision.CameraSetting white_balance_rv = 12;
  bool has_white_balance_rv() const;
  void clear_white_balance_rv();
  static const int kWhiteBalanceRvFieldNumber = 12;
  const ::is::vision::CameraSetting& white_balance_rv() const;
  ::is::vision::CameraSetting* mutable_white_balance_rv();
  ::is::vision::CameraSetting* release_white_balance_rv();
  void set_allocated_white_balance_rv(::is::vision::CameraSetting* white_balance_rv);

  // .is.vision.CameraSetting zoom = 13;
  bool has_zoom() const;
  void clear_zoom();
  static const int kZoomFieldNumber = 13;
  const ::is::vision::CameraSetting& zoom() const;
  ::is::vision::CameraSetting* mutable_zoom();
  ::is::vision::CameraSetting* release_zoom();
  void set_allocated_zoom(::is::vision::CameraSetting* zoom);

  // @@protoc_insertion_point(class_scope:is.vision.CameraSettings)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::is::vision::CameraSetting* brightness_;
  ::is::vision::CameraSetting* exposure_;
  ::is::vision::CameraSetting* focus_;
  ::is::vision::CameraSetting* gain_;
  ::is::vision::CameraSetting* gamma_;
  ::is::vision::CameraSetting* hue_;
  ::is::vision::CameraSetting* iris_;
  ::is::vision::CameraSetting* saturation_;
  ::is::vision::CameraSetting* sharpness_;
  ::is::vision::CameraSetting* shutter_;
  ::is::vision::CameraSetting* white_balance_bu_;
  ::is::vision::CameraSetting* white_balance_rv_;
  ::is::vision::CameraSetting* zoom_;
  mutable int _cached_size_;
  friend struct protobuf_camera_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CameraConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:is.vision.CameraConfig) */ {
 public:
  CameraConfig();
  virtual ~CameraConfig();

  CameraConfig(const CameraConfig& from);

  inline CameraConfig& operator=(const CameraConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraConfig(CameraConfig&& from) noexcept
    : CameraConfig() {
    *this = ::std::move(from);
  }

  inline CameraConfig& operator=(CameraConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraConfig& default_instance();

  static inline const CameraConfig* internal_default_instance() {
    return reinterpret_cast<const CameraConfig*>(
               &_CameraConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CameraConfig* other);
  friend void swap(CameraConfig& a, CameraConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  CameraConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CameraConfig& from);
  void MergeFrom(const CameraConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CameraConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .is.common.SamplingSettings sampling = 1;
  bool has_sampling() const;
  void clear_sampling();
  static const int kSamplingFieldNumber = 1;
  const ::is::common::SamplingSettings& sampling() const;
  ::is::common::SamplingSettings* mutable_sampling();
  ::is::common::SamplingSettings* release_sampling();
  void set_allocated_sampling(::is::common::SamplingSettings* sampling);

  // .is.vision.ImageSettings image = 2;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 2;
  const ::is::vision::ImageSettings& image() const;
  ::is::vision::ImageSettings* mutable_image();
  ::is::vision::ImageSettings* release_image();
  void set_allocated_image(::is::vision::ImageSettings* image);

  // .is.vision.CameraSettings camera = 3;
  bool has_camera() const;
  void clear_camera();
  static const int kCameraFieldNumber = 3;
  const ::is::vision::CameraSettings& camera() const;
  ::is::vision::CameraSettings* mutable_camera();
  ::is::vision::CameraSettings* release_camera();
  void set_allocated_camera(::is::vision::CameraSettings* camera);

  // @@protoc_insertion_point(class_scope:is.vision.CameraConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::is::common::SamplingSettings* sampling_;
  ::is::vision::ImageSettings* image_;
  ::is::vision::CameraSettings* camera_;
  mutable int _cached_size_;
  friend struct protobuf_camera_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CameraCalibration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:is.vision.CameraCalibration) */ {
 public:
  CameraCalibration();
  virtual ~CameraCalibration();

  CameraCalibration(const CameraCalibration& from);

  inline CameraCalibration& operator=(const CameraCalibration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraCalibration(CameraCalibration&& from) noexcept
    : CameraCalibration() {
    *this = ::std::move(from);
  }

  inline CameraCalibration& operator=(CameraCalibration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraCalibration& default_instance();

  static inline const CameraCalibration* internal_default_instance() {
    return reinterpret_cast<const CameraCalibration*>(
               &_CameraCalibration_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CameraCalibration* other);
  friend void swap(CameraCalibration& a, CameraCalibration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraCalibration* New() const PROTOBUF_FINAL { return New(NULL); }

  CameraCalibration* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CameraCalibration& from);
  void MergeFrom(const CameraCalibration& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CameraCalibration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:is.vision.CameraCalibration)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_camera_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraSetting

// bool automatic = 1;
inline void CameraSetting::clear_automatic() {
  automatic_ = false;
}
inline bool CameraSetting::automatic() const {
  // @@protoc_insertion_point(field_get:is.vision.CameraSetting.automatic)
  return automatic_;
}
inline void CameraSetting::set_automatic(bool value) {
  
  automatic_ = value;
  // @@protoc_insertion_point(field_set:is.vision.CameraSetting.automatic)
}

// float ratio = 2;
inline void CameraSetting::clear_ratio() {
  ratio_ = 0;
}
inline float CameraSetting::ratio() const {
  // @@protoc_insertion_point(field_get:is.vision.CameraSetting.ratio)
  return ratio_;
}
inline void CameraSetting::set_ratio(float value) {
  
  ratio_ = value;
  // @@protoc_insertion_point(field_set:is.vision.CameraSetting.ratio)
}

// -------------------------------------------------------------------

// CameraSettings

// .is.vision.CameraSetting brightness = 1;
inline bool CameraSettings::has_brightness() const {
  return this != internal_default_instance() && brightness_ != NULL;
}
inline void CameraSettings::clear_brightness() {
  if (GetArenaNoVirtual() == NULL && brightness_ != NULL) delete brightness_;
  brightness_ = NULL;
}
inline const ::is::vision::CameraSetting& CameraSettings::brightness() const {
  const ::is::vision::CameraSetting* p = brightness_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.brightness)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
inline ::is::vision::CameraSetting* CameraSettings::mutable_brightness() {
  
  if (brightness_ == NULL) {
    brightness_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.brightness)
  return brightness_;
}
inline ::is::vision::CameraSetting* CameraSettings::release_brightness() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.brightness)
  
  ::is::vision::CameraSetting* temp = brightness_;
  brightness_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_brightness(::is::vision::CameraSetting* brightness) {
  delete brightness_;
  brightness_ = brightness;
  if (brightness) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.brightness)
}

// .is.vision.CameraSetting exposure = 2;
inline bool CameraSettings::has_exposure() const {
  return this != internal_default_instance() && exposure_ != NULL;
}
inline void CameraSettings::clear_exposure() {
  if (GetArenaNoVirtual() == NULL && exposure_ != NULL) delete exposure_;
  exposure_ = NULL;
}
inline const ::is::vision::CameraSetting& CameraSettings::exposure() const {
  const ::is::vision::CameraSetting* p = exposure_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.exposure)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
inline ::is::vision::CameraSetting* CameraSettings::mutable_exposure() {
  
  if (exposure_ == NULL) {
    exposure_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.exposure)
  return exposure_;
}
inline ::is::vision::CameraSetting* CameraSettings::release_exposure() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.exposure)
  
  ::is::vision::CameraSetting* temp = exposure_;
  exposure_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_exposure(::is::vision::CameraSetting* exposure) {
  delete exposure_;
  exposure_ = exposure;
  if (exposure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.exposure)
}

// .is.vision.CameraSetting focus = 3;
inline bool CameraSettings::has_focus() const {
  return this != internal_default_instance() && focus_ != NULL;
}
inline void CameraSettings::clear_focus() {
  if (GetArenaNoVirtual() == NULL && focus_ != NULL) delete focus_;
  focus_ = NULL;
}
inline const ::is::vision::CameraSetting& CameraSettings::focus() const {
  const ::is::vision::CameraSetting* p = focus_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.focus)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
inline ::is::vision::CameraSetting* CameraSettings::mutable_focus() {
  
  if (focus_ == NULL) {
    focus_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.focus)
  return focus_;
}
inline ::is::vision::CameraSetting* CameraSettings::release_focus() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.focus)
  
  ::is::vision::CameraSetting* temp = focus_;
  focus_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_focus(::is::vision::CameraSetting* focus) {
  delete focus_;
  focus_ = focus;
  if (focus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.focus)
}

// .is.vision.CameraSetting gain = 4;
inline bool CameraSettings::has_gain() const {
  return this != internal_default_instance() && gain_ != NULL;
}
inline void CameraSettings::clear_gain() {
  if (GetArenaNoVirtual() == NULL && gain_ != NULL) delete gain_;
  gain_ = NULL;
}
inline const ::is::vision::CameraSetting& CameraSettings::gain() const {
  const ::is::vision::CameraSetting* p = gain_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.gain)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
inline ::is::vision::CameraSetting* CameraSettings::mutable_gain() {
  
  if (gain_ == NULL) {
    gain_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.gain)
  return gain_;
}
inline ::is::vision::CameraSetting* CameraSettings::release_gain() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.gain)
  
  ::is::vision::CameraSetting* temp = gain_;
  gain_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_gain(::is::vision::CameraSetting* gain) {
  delete gain_;
  gain_ = gain;
  if (gain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.gain)
}

// .is.vision.CameraSetting gamma = 5;
inline bool CameraSettings::has_gamma() const {
  return this != internal_default_instance() && gamma_ != NULL;
}
inline void CameraSettings::clear_gamma() {
  if (GetArenaNoVirtual() == NULL && gamma_ != NULL) delete gamma_;
  gamma_ = NULL;
}
inline const ::is::vision::CameraSetting& CameraSettings::gamma() const {
  const ::is::vision::CameraSetting* p = gamma_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.gamma)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
inline ::is::vision::CameraSetting* CameraSettings::mutable_gamma() {
  
  if (gamma_ == NULL) {
    gamma_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.gamma)
  return gamma_;
}
inline ::is::vision::CameraSetting* CameraSettings::release_gamma() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.gamma)
  
  ::is::vision::CameraSetting* temp = gamma_;
  gamma_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_gamma(::is::vision::CameraSetting* gamma) {
  delete gamma_;
  gamma_ = gamma;
  if (gamma) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.gamma)
}

// .is.vision.CameraSetting hue = 6;
inline bool CameraSettings::has_hue() const {
  return this != internal_default_instance() && hue_ != NULL;
}
inline void CameraSettings::clear_hue() {
  if (GetArenaNoVirtual() == NULL && hue_ != NULL) delete hue_;
  hue_ = NULL;
}
inline const ::is::vision::CameraSetting& CameraSettings::hue() const {
  const ::is::vision::CameraSetting* p = hue_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.hue)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
inline ::is::vision::CameraSetting* CameraSettings::mutable_hue() {
  
  if (hue_ == NULL) {
    hue_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.hue)
  return hue_;
}
inline ::is::vision::CameraSetting* CameraSettings::release_hue() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.hue)
  
  ::is::vision::CameraSetting* temp = hue_;
  hue_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_hue(::is::vision::CameraSetting* hue) {
  delete hue_;
  hue_ = hue;
  if (hue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.hue)
}

// .is.vision.CameraSetting iris = 7;
inline bool CameraSettings::has_iris() const {
  return this != internal_default_instance() && iris_ != NULL;
}
inline void CameraSettings::clear_iris() {
  if (GetArenaNoVirtual() == NULL && iris_ != NULL) delete iris_;
  iris_ = NULL;
}
inline const ::is::vision::CameraSetting& CameraSettings::iris() const {
  const ::is::vision::CameraSetting* p = iris_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.iris)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
inline ::is::vision::CameraSetting* CameraSettings::mutable_iris() {
  
  if (iris_ == NULL) {
    iris_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.iris)
  return iris_;
}
inline ::is::vision::CameraSetting* CameraSettings::release_iris() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.iris)
  
  ::is::vision::CameraSetting* temp = iris_;
  iris_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_iris(::is::vision::CameraSetting* iris) {
  delete iris_;
  iris_ = iris;
  if (iris) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.iris)
}

// .is.vision.CameraSetting saturation = 8;
inline bool CameraSettings::has_saturation() const {
  return this != internal_default_instance() && saturation_ != NULL;
}
inline void CameraSettings::clear_saturation() {
  if (GetArenaNoVirtual() == NULL && saturation_ != NULL) delete saturation_;
  saturation_ = NULL;
}
inline const ::is::vision::CameraSetting& CameraSettings::saturation() const {
  const ::is::vision::CameraSetting* p = saturation_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.saturation)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
inline ::is::vision::CameraSetting* CameraSettings::mutable_saturation() {
  
  if (saturation_ == NULL) {
    saturation_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.saturation)
  return saturation_;
}
inline ::is::vision::CameraSetting* CameraSettings::release_saturation() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.saturation)
  
  ::is::vision::CameraSetting* temp = saturation_;
  saturation_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_saturation(::is::vision::CameraSetting* saturation) {
  delete saturation_;
  saturation_ = saturation;
  if (saturation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.saturation)
}

// .is.vision.CameraSetting sharpness = 9;
inline bool CameraSettings::has_sharpness() const {
  return this != internal_default_instance() && sharpness_ != NULL;
}
inline void CameraSettings::clear_sharpness() {
  if (GetArenaNoVirtual() == NULL && sharpness_ != NULL) delete sharpness_;
  sharpness_ = NULL;
}
inline const ::is::vision::CameraSetting& CameraSettings::sharpness() const {
  const ::is::vision::CameraSetting* p = sharpness_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.sharpness)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
inline ::is::vision::CameraSetting* CameraSettings::mutable_sharpness() {
  
  if (sharpness_ == NULL) {
    sharpness_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.sharpness)
  return sharpness_;
}
inline ::is::vision::CameraSetting* CameraSettings::release_sharpness() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.sharpness)
  
  ::is::vision::CameraSetting* temp = sharpness_;
  sharpness_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_sharpness(::is::vision::CameraSetting* sharpness) {
  delete sharpness_;
  sharpness_ = sharpness;
  if (sharpness) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.sharpness)
}

// .is.vision.CameraSetting shutter = 10;
inline bool CameraSettings::has_shutter() const {
  return this != internal_default_instance() && shutter_ != NULL;
}
inline void CameraSettings::clear_shutter() {
  if (GetArenaNoVirtual() == NULL && shutter_ != NULL) delete shutter_;
  shutter_ = NULL;
}
inline const ::is::vision::CameraSetting& CameraSettings::shutter() const {
  const ::is::vision::CameraSetting* p = shutter_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.shutter)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
inline ::is::vision::CameraSetting* CameraSettings::mutable_shutter() {
  
  if (shutter_ == NULL) {
    shutter_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.shutter)
  return shutter_;
}
inline ::is::vision::CameraSetting* CameraSettings::release_shutter() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.shutter)
  
  ::is::vision::CameraSetting* temp = shutter_;
  shutter_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_shutter(::is::vision::CameraSetting* shutter) {
  delete shutter_;
  shutter_ = shutter;
  if (shutter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.shutter)
}

// .is.vision.CameraSetting white_balance_bu = 11;
inline bool CameraSettings::has_white_balance_bu() const {
  return this != internal_default_instance() && white_balance_bu_ != NULL;
}
inline void CameraSettings::clear_white_balance_bu() {
  if (GetArenaNoVirtual() == NULL && white_balance_bu_ != NULL) delete white_balance_bu_;
  white_balance_bu_ = NULL;
}
inline const ::is::vision::CameraSetting& CameraSettings::white_balance_bu() const {
  const ::is::vision::CameraSetting* p = white_balance_bu_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.white_balance_bu)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
inline ::is::vision::CameraSetting* CameraSettings::mutable_white_balance_bu() {
  
  if (white_balance_bu_ == NULL) {
    white_balance_bu_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.white_balance_bu)
  return white_balance_bu_;
}
inline ::is::vision::CameraSetting* CameraSettings::release_white_balance_bu() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.white_balance_bu)
  
  ::is::vision::CameraSetting* temp = white_balance_bu_;
  white_balance_bu_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_white_balance_bu(::is::vision::CameraSetting* white_balance_bu) {
  delete white_balance_bu_;
  white_balance_bu_ = white_balance_bu;
  if (white_balance_bu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.white_balance_bu)
}

// .is.vision.CameraSetting white_balance_rv = 12;
inline bool CameraSettings::has_white_balance_rv() const {
  return this != internal_default_instance() && white_balance_rv_ != NULL;
}
inline void CameraSettings::clear_white_balance_rv() {
  if (GetArenaNoVirtual() == NULL && white_balance_rv_ != NULL) delete white_balance_rv_;
  white_balance_rv_ = NULL;
}
inline const ::is::vision::CameraSetting& CameraSettings::white_balance_rv() const {
  const ::is::vision::CameraSetting* p = white_balance_rv_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.white_balance_rv)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
inline ::is::vision::CameraSetting* CameraSettings::mutable_white_balance_rv() {
  
  if (white_balance_rv_ == NULL) {
    white_balance_rv_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.white_balance_rv)
  return white_balance_rv_;
}
inline ::is::vision::CameraSetting* CameraSettings::release_white_balance_rv() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.white_balance_rv)
  
  ::is::vision::CameraSetting* temp = white_balance_rv_;
  white_balance_rv_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_white_balance_rv(::is::vision::CameraSetting* white_balance_rv) {
  delete white_balance_rv_;
  white_balance_rv_ = white_balance_rv;
  if (white_balance_rv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.white_balance_rv)
}

// .is.vision.CameraSetting zoom = 13;
inline bool CameraSettings::has_zoom() const {
  return this != internal_default_instance() && zoom_ != NULL;
}
inline void CameraSettings::clear_zoom() {
  if (GetArenaNoVirtual() == NULL && zoom_ != NULL) delete zoom_;
  zoom_ = NULL;
}
inline const ::is::vision::CameraSetting& CameraSettings::zoom() const {
  const ::is::vision::CameraSetting* p = zoom_;
  // @@protoc_insertion_point(field_get:is.vision.CameraSettings.zoom)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSetting*>(
      &::is::vision::_CameraSetting_default_instance_);
}
inline ::is::vision::CameraSetting* CameraSettings::mutable_zoom() {
  
  if (zoom_ == NULL) {
    zoom_ = new ::is::vision::CameraSetting;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraSettings.zoom)
  return zoom_;
}
inline ::is::vision::CameraSetting* CameraSettings::release_zoom() {
  // @@protoc_insertion_point(field_release:is.vision.CameraSettings.zoom)
  
  ::is::vision::CameraSetting* temp = zoom_;
  zoom_ = NULL;
  return temp;
}
inline void CameraSettings::set_allocated_zoom(::is::vision::CameraSetting* zoom) {
  delete zoom_;
  zoom_ = zoom;
  if (zoom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraSettings.zoom)
}

// -------------------------------------------------------------------

// CameraConfig

// .is.common.SamplingSettings sampling = 1;
inline bool CameraConfig::has_sampling() const {
  return this != internal_default_instance() && sampling_ != NULL;
}
inline void CameraConfig::clear_sampling() {
  if (GetArenaNoVirtual() == NULL && sampling_ != NULL) delete sampling_;
  sampling_ = NULL;
}
inline const ::is::common::SamplingSettings& CameraConfig::sampling() const {
  const ::is::common::SamplingSettings* p = sampling_;
  // @@protoc_insertion_point(field_get:is.vision.CameraConfig.sampling)
  return p != NULL ? *p : *reinterpret_cast<const ::is::common::SamplingSettings*>(
      &::is::common::_SamplingSettings_default_instance_);
}
inline ::is::common::SamplingSettings* CameraConfig::mutable_sampling() {
  
  if (sampling_ == NULL) {
    sampling_ = new ::is::common::SamplingSettings;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraConfig.sampling)
  return sampling_;
}
inline ::is::common::SamplingSettings* CameraConfig::release_sampling() {
  // @@protoc_insertion_point(field_release:is.vision.CameraConfig.sampling)
  
  ::is::common::SamplingSettings* temp = sampling_;
  sampling_ = NULL;
  return temp;
}
inline void CameraConfig::set_allocated_sampling(::is::common::SamplingSettings* sampling) {
  delete sampling_;
  sampling_ = sampling;
  if (sampling) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraConfig.sampling)
}

// .is.vision.ImageSettings image = 2;
inline bool CameraConfig::has_image() const {
  return this != internal_default_instance() && image_ != NULL;
}
inline void CameraConfig::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
inline const ::is::vision::ImageSettings& CameraConfig::image() const {
  const ::is::vision::ImageSettings* p = image_;
  // @@protoc_insertion_point(field_get:is.vision.CameraConfig.image)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::ImageSettings*>(
      &::is::vision::_ImageSettings_default_instance_);
}
inline ::is::vision::ImageSettings* CameraConfig::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::is::vision::ImageSettings;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraConfig.image)
  return image_;
}
inline ::is::vision::ImageSettings* CameraConfig::release_image() {
  // @@protoc_insertion_point(field_release:is.vision.CameraConfig.image)
  
  ::is::vision::ImageSettings* temp = image_;
  image_ = NULL;
  return temp;
}
inline void CameraConfig::set_allocated_image(::is::vision::ImageSettings* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraConfig.image)
}

// .is.vision.CameraSettings camera = 3;
inline bool CameraConfig::has_camera() const {
  return this != internal_default_instance() && camera_ != NULL;
}
inline void CameraConfig::clear_camera() {
  if (GetArenaNoVirtual() == NULL && camera_ != NULL) delete camera_;
  camera_ = NULL;
}
inline const ::is::vision::CameraSettings& CameraConfig::camera() const {
  const ::is::vision::CameraSettings* p = camera_;
  // @@protoc_insertion_point(field_get:is.vision.CameraConfig.camera)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::CameraSettings*>(
      &::is::vision::_CameraSettings_default_instance_);
}
inline ::is::vision::CameraSettings* CameraConfig::mutable_camera() {
  
  if (camera_ == NULL) {
    camera_ = new ::is::vision::CameraSettings;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.CameraConfig.camera)
  return camera_;
}
inline ::is::vision::CameraSettings* CameraConfig::release_camera() {
  // @@protoc_insertion_point(field_release:is.vision.CameraConfig.camera)
  
  ::is::vision::CameraSettings* temp = camera_;
  camera_ = NULL;
  return temp;
}
inline void CameraConfig::set_allocated_camera(::is::vision::CameraSettings* camera) {
  delete camera_;
  camera_ = camera;
  if (camera) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.CameraConfig.camera)
}

// -------------------------------------------------------------------

// CameraCalibration

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace vision
}  // namespace is

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::is::vision::CameraConfigFields> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::is::vision::CameraConfigFields>() {
  return ::is::vision::CameraConfigFields_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_camera_2eproto__INCLUDED
