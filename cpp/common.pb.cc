// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace is {
namespace common {
class SamplingSettingsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SamplingSettings>
     _instance;
  float frequency_;
  float period_;
} _SamplingSettings_default_instance_;
class FieldSelectorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FieldSelector>
     _instance;
} _FieldSelector_default_instance_;
class StatusDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Status>
     _instance;
} _Status_default_instance_;
class DoubleMatrixDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DoubleMatrix>
     _instance;
} _DoubleMatrix_default_instance_;

namespace protobuf_common_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SamplingSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SamplingSettings, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(SamplingSettingsDefaultTypeInternal, frequency_),
  offsetof(SamplingSettingsDefaultTypeInternal, period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SamplingSettings, rate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldSelector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldSelector, fields_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, why_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleMatrix, rows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleMatrix, cols_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleMatrix, data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(SamplingSettings)},
  { 8, -1, sizeof(FieldSelector)},
  { 14, -1, sizeof(Status)},
  { 21, -1, sizeof(DoubleMatrix)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SamplingSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FieldSelector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Status_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DoubleMatrix_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "common.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SamplingSettings_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SamplingSettings_default_instance_);_FieldSelector_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FieldSelector_default_instance_);_Status_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Status_default_instance_);_DoubleMatrix_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DoubleMatrix_default_instance_);_SamplingSettings_default_instance_.frequency_ = 0;
  _SamplingSettings_default_instance_.period_ = 0;
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014common.proto\022\tis.common\"A\n\020SamplingSet"
      "tings\022\023\n\tfrequency\030\001 \001(\002H\000\022\020\n\006period\030\002 \001"
      "(\002H\000B\006\n\004rate\"\037\n\rFieldSelector\022\016\n\006fields\030"
      "\001 \003(\r\":\n\006Status\022#\n\004code\030\001 \001(\0162\025.is.commo"
      "n.StatusCode\022\013\n\003why\030\002 \001(\t\"<\n\014DoubleMatri"
      "x\022\014\n\004rows\030\001 \001(\r\022\014\n\004cols\030\002 \001(\r\022\020\n\004data\030\003 "
      "\003(\001B\002\020\001*\376\001\n\nStatusCode\022\013\n\007UNKNOWN\020\000\022\006\n\002O"
      "K\020\001\022\r\n\tCANCELLED\020\002\022\024\n\020INVALID_ARGUMENT\020\003"
      "\022\025\n\021DEADLINE_EXCEEDED\020\004\022\r\n\tNOT_FOUND\020\005\022\022"
      "\n\016ALREADY_EXISTS\020\006\022\025\n\021PERMISSION_DENIED\020"
      "\007\022\023\n\017UNAUTHENTICATED\020\010\022\027\n\023FAILED_PRECOND"
      "ITION\020\t\022\020\n\014OUT_OF_RANGE\020\n\022\021\n\rUNIMPLEMENT"
      "ED\020\013\022\022\n\016INTERNAL_ERROR\020\014B\017\n\rcom.is.commo"
      "nb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 529);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_common_2eproto

const ::google::protobuf::EnumDescriptor* StatusCode_descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_enum_descriptors[0];
}
bool StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SamplingSettings::kFrequencyFieldNumber;
const int SamplingSettings::kPeriodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SamplingSettings::SamplingSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:is.common.SamplingSettings)
}
SamplingSettings::SamplingSettings(const SamplingSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_rate();
  switch (from.rate_case()) {
    case kFrequency: {
      set_frequency(from.frequency());
      break;
    }
    case kPeriod: {
      set_period(from.period());
      break;
    }
    case RATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:is.common.SamplingSettings)
}

void SamplingSettings::SharedCtor() {
  clear_has_rate();
  _cached_size_ = 0;
}

SamplingSettings::~SamplingSettings() {
  // @@protoc_insertion_point(destructor:is.common.SamplingSettings)
  SharedDtor();
}

void SamplingSettings::SharedDtor() {
  if (has_rate()) {
    clear_rate();
  }
}

void SamplingSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SamplingSettings::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SamplingSettings& SamplingSettings::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

SamplingSettings* SamplingSettings::New(::google::protobuf::Arena* arena) const {
  SamplingSettings* n = new SamplingSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SamplingSettings::clear_rate() {
// @@protoc_insertion_point(one_of_clear_start:is.common.SamplingSettings)
  switch (rate_case()) {
    case kFrequency: {
      // No need to clear
      break;
    }
    case kPeriod: {
      // No need to clear
      break;
    }
    case RATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RATE_NOT_SET;
}


void SamplingSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:is.common.SamplingSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_rate();
  _internal_metadata_.Clear();
}

bool SamplingSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:is.common.SamplingSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float frequency = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          clear_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rate_.frequency_)));
          set_has_frequency();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float period = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          clear_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rate_.period_)));
          set_has_period();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:is.common.SamplingSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:is.common.SamplingSettings)
  return false;
#undef DO_
}

void SamplingSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:is.common.SamplingSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float frequency = 1;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->frequency(), output);
  }

  // float period = 2;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->period(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:is.common.SamplingSettings)
}

::google::protobuf::uint8* SamplingSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:is.common.SamplingSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float frequency = 1;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->frequency(), target);
  }

  // float period = 2;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->period(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:is.common.SamplingSettings)
  return target;
}

size_t SamplingSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:is.common.SamplingSettings)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (rate_case()) {
    // float frequency = 1;
    case kFrequency: {
      total_size += 1 + 4;
      break;
    }
    // float period = 2;
    case kPeriod: {
      total_size += 1 + 4;
      break;
    }
    case RATE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SamplingSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:is.common.SamplingSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const SamplingSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SamplingSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:is.common.SamplingSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:is.common.SamplingSettings)
    MergeFrom(*source);
  }
}

void SamplingSettings::MergeFrom(const SamplingSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:is.common.SamplingSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.rate_case()) {
    case kFrequency: {
      set_frequency(from.frequency());
      break;
    }
    case kPeriod: {
      set_period(from.period());
      break;
    }
    case RATE_NOT_SET: {
      break;
    }
  }
}

void SamplingSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:is.common.SamplingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SamplingSettings::CopyFrom(const SamplingSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:is.common.SamplingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SamplingSettings::IsInitialized() const {
  return true;
}

void SamplingSettings::Swap(SamplingSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SamplingSettings::InternalSwap(SamplingSettings* other) {
  using std::swap;
  swap(rate_, other->rate_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SamplingSettings::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SamplingSettings

// float frequency = 1;
bool SamplingSettings::has_frequency() const {
  return rate_case() == kFrequency;
}
void SamplingSettings::set_has_frequency() {
  _oneof_case_[0] = kFrequency;
}
void SamplingSettings::clear_frequency() {
  if (has_frequency()) {
    rate_.frequency_ = 0;
    clear_has_rate();
  }
}
float SamplingSettings::frequency() const {
  // @@protoc_insertion_point(field_get:is.common.SamplingSettings.frequency)
  if (has_frequency()) {
    return rate_.frequency_;
  }
  return 0;
}
void SamplingSettings::set_frequency(float value) {
  if (!has_frequency()) {
    clear_rate();
    set_has_frequency();
  }
  rate_.frequency_ = value;
  // @@protoc_insertion_point(field_set:is.common.SamplingSettings.frequency)
}

// float period = 2;
bool SamplingSettings::has_period() const {
  return rate_case() == kPeriod;
}
void SamplingSettings::set_has_period() {
  _oneof_case_[0] = kPeriod;
}
void SamplingSettings::clear_period() {
  if (has_period()) {
    rate_.period_ = 0;
    clear_has_rate();
  }
}
float SamplingSettings::period() const {
  // @@protoc_insertion_point(field_get:is.common.SamplingSettings.period)
  if (has_period()) {
    return rate_.period_;
  }
  return 0;
}
void SamplingSettings::set_period(float value) {
  if (!has_period()) {
    clear_rate();
    set_has_period();
  }
  rate_.period_ = value;
  // @@protoc_insertion_point(field_set:is.common.SamplingSettings.period)
}

bool SamplingSettings::has_rate() const {
  return rate_case() != RATE_NOT_SET;
}
void SamplingSettings::clear_has_rate() {
  _oneof_case_[0] = RATE_NOT_SET;
}
SamplingSettings::RateCase SamplingSettings::rate_case() const {
  return SamplingSettings::RateCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldSelector::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldSelector::FieldSelector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:is.common.FieldSelector)
}
FieldSelector::FieldSelector(const FieldSelector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fields_(from.fields_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:is.common.FieldSelector)
}

void FieldSelector::SharedCtor() {
  _cached_size_ = 0;
}

FieldSelector::~FieldSelector() {
  // @@protoc_insertion_point(destructor:is.common.FieldSelector)
  SharedDtor();
}

void FieldSelector::SharedDtor() {
}

void FieldSelector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldSelector::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FieldSelector& FieldSelector::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

FieldSelector* FieldSelector::New(::google::protobuf::Arena* arena) const {
  FieldSelector* n = new FieldSelector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FieldSelector::Clear() {
// @@protoc_insertion_point(message_clear_start:is.common.FieldSelector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  _internal_metadata_.Clear();
}

bool FieldSelector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:is.common.FieldSelector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 fields = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fields())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_fields())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:is.common.FieldSelector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:is.common.FieldSelector)
  return false;
#undef DO_
}

void FieldSelector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:is.common.FieldSelector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 fields = 1;
  if (this->fields_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _fields_cached_byte_size_));
  }
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->fields(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:is.common.FieldSelector)
}

::google::protobuf::uint8* FieldSelector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:is.common.FieldSelector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 fields = 1;
  if (this->fields_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _fields_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->fields_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:is.common.FieldSelector)
  return target;
}

size_t FieldSelector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:is.common.FieldSelector)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 fields = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->fields_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fields_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldSelector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:is.common.FieldSelector)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldSelector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldSelector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:is.common.FieldSelector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:is.common.FieldSelector)
    MergeFrom(*source);
  }
}

void FieldSelector::MergeFrom(const FieldSelector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:is.common.FieldSelector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
}

void FieldSelector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:is.common.FieldSelector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldSelector::CopyFrom(const FieldSelector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:is.common.FieldSelector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldSelector::IsInitialized() const {
  return true;
}

void FieldSelector::Swap(FieldSelector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldSelector::InternalSwap(FieldSelector* other) {
  using std::swap;
  fields_.InternalSwap(&other->fields_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FieldSelector::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FieldSelector

// repeated uint32 fields = 1;
int FieldSelector::fields_size() const {
  return fields_.size();
}
void FieldSelector::clear_fields() {
  fields_.Clear();
}
::google::protobuf::uint32 FieldSelector::fields(int index) const {
  // @@protoc_insertion_point(field_get:is.common.FieldSelector.fields)
  return fields_.Get(index);
}
void FieldSelector::set_fields(int index, ::google::protobuf::uint32 value) {
  fields_.Set(index, value);
  // @@protoc_insertion_point(field_set:is.common.FieldSelector.fields)
}
void FieldSelector::add_fields(::google::protobuf::uint32 value) {
  fields_.Add(value);
  // @@protoc_insertion_point(field_add:is.common.FieldSelector.fields)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FieldSelector::fields() const {
  // @@protoc_insertion_point(field_list:is.common.FieldSelector.fields)
  return fields_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FieldSelector::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:is.common.FieldSelector.fields)
  return &fields_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Status::kCodeFieldNumber;
const int Status::kWhyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:is.common.Status)
}
Status::Status(const Status& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  why_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.why().size() > 0) {
    why_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.why_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:is.common.Status)
}

void Status::SharedCtor() {
  why_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _cached_size_ = 0;
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:is.common.Status)
  SharedDtor();
}

void Status::SharedDtor() {
  why_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Status& Status::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

Status* Status::New(::google::protobuf::Arena* arena) const {
  Status* n = new Status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:is.common.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  why_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  _internal_metadata_.Clear();
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:is.common.Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .is.common.StatusCode code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_code(static_cast< ::is::common::StatusCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string why = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_why()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->why().data(), static_cast<int>(this->why().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "is.common.Status.why"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:is.common.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:is.common.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:is.common.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .is.common.StatusCode code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // string why = 2;
  if (this->why().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->why().data(), static_cast<int>(this->why().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "is.common.Status.why");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->why(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:is.common.Status)
}

::google::protobuf::uint8* Status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:is.common.Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .is.common.StatusCode code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // string why = 2;
  if (this->why().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->why().data(), static_cast<int>(this->why().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "is.common.Status.why");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->why(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:is.common.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:is.common.Status)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string why = 2;
  if (this->why().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->why());
  }

  // .is.common.StatusCode code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:is.common.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:is.common.Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:is.common.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:is.common.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.why().size() > 0) {

    why_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.why_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:is.common.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:is.common.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  using std::swap;
  why_.Swap(&other->why_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Status

// .is.common.StatusCode code = 1;
void Status::clear_code() {
  code_ = 0;
}
::is::common::StatusCode Status::code() const {
  // @@protoc_insertion_point(field_get:is.common.Status.code)
  return static_cast< ::is::common::StatusCode >(code_);
}
void Status::set_code(::is::common::StatusCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:is.common.Status.code)
}

// string why = 2;
void Status::clear_why() {
  why_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Status::why() const {
  // @@protoc_insertion_point(field_get:is.common.Status.why)
  return why_.GetNoArena();
}
void Status::set_why(const ::std::string& value) {
  
  why_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:is.common.Status.why)
}
#if LANG_CXX11
void Status::set_why(::std::string&& value) {
  
  why_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:is.common.Status.why)
}
#endif
void Status::set_why(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  why_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:is.common.Status.why)
}
void Status::set_why(const char* value, size_t size) {
  
  why_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:is.common.Status.why)
}
::std::string* Status::mutable_why() {
  
  // @@protoc_insertion_point(field_mutable:is.common.Status.why)
  return why_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Status::release_why() {
  // @@protoc_insertion_point(field_release:is.common.Status.why)
  
  return why_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Status::set_allocated_why(::std::string* why) {
  if (why != NULL) {
    
  } else {
    
  }
  why_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), why);
  // @@protoc_insertion_point(field_set_allocated:is.common.Status.why)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoubleMatrix::kRowsFieldNumber;
const int DoubleMatrix::kColsFieldNumber;
const int DoubleMatrix::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoubleMatrix::DoubleMatrix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:is.common.DoubleMatrix)
}
DoubleMatrix::DoubleMatrix(const DoubleMatrix& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rows_, &from.rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&cols_) -
    reinterpret_cast<char*>(&rows_)) + sizeof(cols_));
  // @@protoc_insertion_point(copy_constructor:is.common.DoubleMatrix)
}

void DoubleMatrix::SharedCtor() {
  ::memset(&rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cols_) -
      reinterpret_cast<char*>(&rows_)) + sizeof(cols_));
  _cached_size_ = 0;
}

DoubleMatrix::~DoubleMatrix() {
  // @@protoc_insertion_point(destructor:is.common.DoubleMatrix)
  SharedDtor();
}

void DoubleMatrix::SharedDtor() {
}

void DoubleMatrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubleMatrix::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DoubleMatrix& DoubleMatrix::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

DoubleMatrix* DoubleMatrix::New(::google::protobuf::Arena* arena) const {
  DoubleMatrix* n = new DoubleMatrix;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DoubleMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:is.common.DoubleMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  ::memset(&rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cols_) -
      reinterpret_cast<char*>(&rows_)) + sizeof(cols_));
  _internal_metadata_.Clear();
}

bool DoubleMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:is.common.DoubleMatrix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 rows = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cols = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cols_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double data = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:is.common.DoubleMatrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:is.common.DoubleMatrix)
  return false;
#undef DO_
}

void DoubleMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:is.common.DoubleMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rows = 1;
  if (this->rows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rows(), output);
  }

  // uint32 cols = 2;
  if (this->cols() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cols(), output);
  }

  // repeated double data = 3 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _data_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->data().data(), this->data_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:is.common.DoubleMatrix)
}

::google::protobuf::uint8* DoubleMatrix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:is.common.DoubleMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rows = 1;
  if (this->rows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rows(), target);
  }

  // uint32 cols = 2;
  if (this->cols() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cols(), target);
  }

  // repeated double data = 3 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->data_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:is.common.DoubleMatrix)
  return target;
}

size_t DoubleMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:is.common.DoubleMatrix)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double data = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 rows = 1;
  if (this->rows() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rows());
  }

  // uint32 cols = 2;
  if (this->cols() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cols());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubleMatrix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:is.common.DoubleMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleMatrix* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DoubleMatrix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:is.common.DoubleMatrix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:is.common.DoubleMatrix)
    MergeFrom(*source);
  }
}

void DoubleMatrix::MergeFrom(const DoubleMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:is.common.DoubleMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.rows() != 0) {
    set_rows(from.rows());
  }
  if (from.cols() != 0) {
    set_cols(from.cols());
  }
}

void DoubleMatrix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:is.common.DoubleMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleMatrix::CopyFrom(const DoubleMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:is.common.DoubleMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleMatrix::IsInitialized() const {
  return true;
}

void DoubleMatrix::Swap(DoubleMatrix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoubleMatrix::InternalSwap(DoubleMatrix* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(rows_, other->rows_);
  swap(cols_, other->cols_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DoubleMatrix::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DoubleMatrix

// uint32 rows = 1;
void DoubleMatrix::clear_rows() {
  rows_ = 0u;
}
::google::protobuf::uint32 DoubleMatrix::rows() const {
  // @@protoc_insertion_point(field_get:is.common.DoubleMatrix.rows)
  return rows_;
}
void DoubleMatrix::set_rows(::google::protobuf::uint32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:is.common.DoubleMatrix.rows)
}

// uint32 cols = 2;
void DoubleMatrix::clear_cols() {
  cols_ = 0u;
}
::google::protobuf::uint32 DoubleMatrix::cols() const {
  // @@protoc_insertion_point(field_get:is.common.DoubleMatrix.cols)
  return cols_;
}
void DoubleMatrix::set_cols(::google::protobuf::uint32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:is.common.DoubleMatrix.cols)
}

// repeated double data = 3 [packed = true];
int DoubleMatrix::data_size() const {
  return data_.size();
}
void DoubleMatrix::clear_data() {
  data_.Clear();
}
double DoubleMatrix::data(int index) const {
  // @@protoc_insertion_point(field_get:is.common.DoubleMatrix.data)
  return data_.Get(index);
}
void DoubleMatrix::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:is.common.DoubleMatrix.data)
}
void DoubleMatrix::add_data(double value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:is.common.DoubleMatrix.data)
}
const ::google::protobuf::RepeatedField< double >&
DoubleMatrix::data() const {
  // @@protoc_insertion_point(field_list:is.common.DoubleMatrix.data)
  return data_;
}
::google::protobuf::RepeatedField< double >*
DoubleMatrix::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:is.common.DoubleMatrix.data)
  return &data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace is

// @@protoc_insertion_point(global_scope)
