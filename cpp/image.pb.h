// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image.proto

#ifndef PROTOBUF_image_2eproto__INCLUDED
#define PROTOBUF_image_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace is {
namespace vision {
class BoundingBox;
class BoundingBoxDefaultTypeInternal;
extern BoundingBoxDefaultTypeInternal _BoundingBox_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class ImageSettings;
class ImageSettingsDefaultTypeInternal;
extern ImageSettingsDefaultTypeInternal _ImageSettings_default_instance_;
class Resolution;
class ResolutionDefaultTypeInternal;
extern ResolutionDefaultTypeInternal _Resolution_default_instance_;
class Vertex;
class VertexDefaultTypeInternal;
extern VertexDefaultTypeInternal _Vertex_default_instance_;
}  // namespace vision
}  // namespace is

namespace is {
namespace vision {

namespace protobuf_image_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_image_2eproto

enum ImageFormat {
  PNG = 0,
  JPEG = 1,
  WebP = 2,
  ImageFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ImageFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ImageFormat_IsValid(int value);
const ImageFormat ImageFormat_MIN = PNG;
const ImageFormat ImageFormat_MAX = WebP;
const int ImageFormat_ARRAYSIZE = ImageFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImageFormat_descriptor();
inline const ::std::string& ImageFormat_Name(ImageFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImageFormat_descriptor(), value);
}
inline bool ImageFormat_Parse(
    const ::std::string& name, ImageFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImageFormat>(
    ImageFormat_descriptor(), name, value);
}
enum ColorSpace {
  RGB = 0,
  GRAY = 1,
  YCrCb = 2,
  HSV = 3,
  ColorSpace_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ColorSpace_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ColorSpace_IsValid(int value);
const ColorSpace ColorSpace_MIN = RGB;
const ColorSpace ColorSpace_MAX = HSV;
const int ColorSpace_ARRAYSIZE = ColorSpace_MAX + 1;

const ::google::protobuf::EnumDescriptor* ColorSpace_descriptor();
inline const ::std::string& ColorSpace_Name(ColorSpace value) {
  return ::google::protobuf::internal::NameOfEnum(
    ColorSpace_descriptor(), value);
}
inline bool ColorSpace_Parse(
    const ::std::string& name, ColorSpace* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ColorSpace>(
    ColorSpace_descriptor(), name, value);
}
// ===================================================================

class Image : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:is.vision.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  enum ContentCase {
    kData = 1,
    kUri = 2,
    CONTENT_NOT_SET = 0,
  };

  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Image* other);
  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const PROTOBUF_FINAL { return New(NULL); }

  Image* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  private:
  bool has_data() const;
  public:
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string uri = 2;
  private:
  bool has_uri() const;
  public:
  void clear_uri();
  static const int kUriFieldNumber = 2;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:is.vision.Image)
 private:
  void set_has_data();
  void set_has_uri();

  inline bool has_content() const;
  void clear_content();
  inline void clear_has_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ContentUnion {
    ContentUnion() {}
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::internal::ArenaStringPtr uri_;
  } content_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_image_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Vertex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:is.vision.Vertex) */ {
 public:
  Vertex();
  virtual ~Vertex();

  Vertex(const Vertex& from);

  inline Vertex& operator=(const Vertex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vertex(Vertex&& from) noexcept
    : Vertex() {
    *this = ::std::move(from);
  }

  inline Vertex& operator=(Vertex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vertex& default_instance();

  static inline const Vertex* internal_default_instance() {
    return reinterpret_cast<const Vertex*>(
               &_Vertex_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Vertex* other);
  friend void swap(Vertex& a, Vertex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vertex* New() const PROTOBUF_FINAL { return New(NULL); }

  Vertex* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vertex& from);
  void MergeFrom(const Vertex& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vertex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::uint32 x() const;
  void set_x(::google::protobuf::uint32 value);

  // uint32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::uint32 y() const;
  void set_y(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:is.vision.Vertex)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  mutable int _cached_size_;
  friend struct protobuf_image_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BoundingBox : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:is.vision.BoundingBox) */ {
 public:
  BoundingBox();
  virtual ~BoundingBox();

  BoundingBox(const BoundingBox& from);

  inline BoundingBox& operator=(const BoundingBox& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BoundingBox(BoundingBox&& from) noexcept
    : BoundingBox() {
    *this = ::std::move(from);
  }

  inline BoundingBox& operator=(BoundingBox&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BoundingBox& default_instance();

  static inline const BoundingBox* internal_default_instance() {
    return reinterpret_cast<const BoundingBox*>(
               &_BoundingBox_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(BoundingBox* other);
  friend void swap(BoundingBox& a, BoundingBox& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BoundingBox* New() const PROTOBUF_FINAL { return New(NULL); }

  BoundingBox* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BoundingBox& from);
  void MergeFrom(const BoundingBox& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BoundingBox* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::uint32 x() const;
  void set_x(::google::protobuf::uint32 value);

  // uint32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::uint32 y() const;
  void set_y(::google::protobuf::uint32 value);

  // uint32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // uint32 width = 4;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:is.vision.BoundingBox)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 width_;
  mutable int _cached_size_;
  friend struct protobuf_image_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Resolution : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:is.vision.Resolution) */ {
 public:
  Resolution();
  virtual ~Resolution();

  Resolution(const Resolution& from);

  inline Resolution& operator=(const Resolution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Resolution(Resolution&& from) noexcept
    : Resolution() {
    *this = ::std::move(from);
  }

  inline Resolution& operator=(Resolution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Resolution& default_instance();

  static inline const Resolution* internal_default_instance() {
    return reinterpret_cast<const Resolution*>(
               &_Resolution_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Resolution* other);
  friend void swap(Resolution& a, Resolution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Resolution* New() const PROTOBUF_FINAL { return New(NULL); }

  Resolution* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Resolution& from);
  void MergeFrom(const Resolution& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Resolution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 height = 1;
  void clear_height();
  static const int kHeightFieldNumber = 1;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // uint32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:is.vision.Resolution)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 width_;
  mutable int _cached_size_;
  friend struct protobuf_image_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageSettings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:is.vision.ImageSettings) */ {
 public:
  ImageSettings();
  virtual ~ImageSettings();

  ImageSettings(const ImageSettings& from);

  inline ImageSettings& operator=(const ImageSettings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageSettings(ImageSettings&& from) noexcept
    : ImageSettings() {
    *this = ::std::move(from);
  }

  inline ImageSettings& operator=(ImageSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageSettings& default_instance();

  static inline const ImageSettings* internal_default_instance() {
    return reinterpret_cast<const ImageSettings*>(
               &_ImageSettings_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ImageSettings* other);
  friend void swap(ImageSettings& a, ImageSettings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageSettings* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageSettings* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageSettings& from);
  void MergeFrom(const ImageSettings& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .is.vision.Resolution resolution = 1;
  bool has_resolution() const;
  void clear_resolution();
  static const int kResolutionFieldNumber = 1;
  const ::is::vision::Resolution& resolution() const;
  ::is::vision::Resolution* mutable_resolution();
  ::is::vision::Resolution* release_resolution();
  void set_allocated_resolution(::is::vision::Resolution* resolution);

  // .is.vision.BoundingBox roi = 4;
  bool has_roi() const;
  void clear_roi();
  static const int kRoiFieldNumber = 4;
  const ::is::vision::BoundingBox& roi() const;
  ::is::vision::BoundingBox* mutable_roi();
  ::is::vision::BoundingBox* release_roi();
  void set_allocated_roi(::is::vision::BoundingBox* roi);

  // .is.vision.ImageFormat format = 2;
  void clear_format();
  static const int kFormatFieldNumber = 2;
  ::is::vision::ImageFormat format() const;
  void set_format(::is::vision::ImageFormat value);

  // .is.vision.ColorSpace color = 3;
  void clear_color();
  static const int kColorFieldNumber = 3;
  ::is::vision::ColorSpace color() const;
  void set_color(::is::vision::ColorSpace value);

  // @@protoc_insertion_point(class_scope:is.vision.ImageSettings)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::is::vision::Resolution* resolution_;
  ::is::vision::BoundingBox* roi_;
  int format_;
  int color_;
  mutable int _cached_size_;
  friend struct protobuf_image_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Image

// bytes data = 1;
inline bool Image::has_data() const {
  return content_case() == kData;
}
inline void Image::set_has_data() {
  _oneof_case_[0] = kData;
}
inline void Image::clear_data() {
  if (has_data()) {
    content_.data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_content();
  }
}
inline const ::std::string& Image::data() const {
  // @@protoc_insertion_point(field_get:is.vision.Image.data)
  if (has_data()) {
    return content_.data_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Image::set_data(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:is.vision.Image.data)
  if (!has_data()) {
    clear_content();
    set_has_data();
    content_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:is.vision.Image.data)
}
#if LANG_CXX11
inline void Image::set_data(::std::string&& value) {
  // @@protoc_insertion_point(field_set:is.vision.Image.data)
  if (!has_data()) {
    clear_content();
    set_has_data();
    content_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:is.vision.Image.data)
}
#endif
inline void Image::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_data()) {
    clear_content();
    set_has_data();
    content_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:is.vision.Image.data)
}
inline void Image::set_data(const void* value, size_t size) {
  if (!has_data()) {
    clear_content();
    set_has_data();
    content_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:is.vision.Image.data)
}
inline ::std::string* Image::mutable_data() {
  if (!has_data()) {
    clear_content();
    set_has_data();
    content_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:is.vision.Image.data)
  return content_.data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_data() {
  // @@protoc_insertion_point(field_release:is.vision.Image.data)
  if (has_data()) {
    clear_has_content();
    return content_.data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Image::set_allocated_data(::std::string* data) {
  if (!has_data()) {
    content_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_content();
  if (data != NULL) {
    set_has_data();
    content_.data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        data);
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.Image.data)
}

// string uri = 2;
inline bool Image::has_uri() const {
  return content_case() == kUri;
}
inline void Image::set_has_uri() {
  _oneof_case_[0] = kUri;
}
inline void Image::clear_uri() {
  if (has_uri()) {
    content_.uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_content();
  }
}
inline const ::std::string& Image::uri() const {
  // @@protoc_insertion_point(field_get:is.vision.Image.uri)
  if (has_uri()) {
    return content_.uri_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Image::set_uri(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:is.vision.Image.uri)
  if (!has_uri()) {
    clear_content();
    set_has_uri();
    content_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:is.vision.Image.uri)
}
#if LANG_CXX11
inline void Image::set_uri(::std::string&& value) {
  // @@protoc_insertion_point(field_set:is.vision.Image.uri)
  if (!has_uri()) {
    clear_content();
    set_has_uri();
    content_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:is.vision.Image.uri)
}
#endif
inline void Image::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_uri()) {
    clear_content();
    set_has_uri();
    content_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:is.vision.Image.uri)
}
inline void Image::set_uri(const char* value, size_t size) {
  if (!has_uri()) {
    clear_content();
    set_has_uri();
    content_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  content_.uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:is.vision.Image.uri)
}
inline ::std::string* Image::mutable_uri() {
  if (!has_uri()) {
    clear_content();
    set_has_uri();
    content_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:is.vision.Image.uri)
  return content_.uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_uri() {
  // @@protoc_insertion_point(field_release:is.vision.Image.uri)
  if (has_uri()) {
    clear_has_content();
    return content_.uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Image::set_allocated_uri(::std::string* uri) {
  if (!has_uri()) {
    content_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_content();
  if (uri != NULL) {
    set_has_uri();
    content_.uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        uri);
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.Image.uri)
}

inline bool Image::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void Image::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline Image::ContentCase Image::content_case() const {
  return Image::ContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Vertex

// uint32 x = 1;
inline void Vertex::clear_x() {
  x_ = 0u;
}
inline ::google::protobuf::uint32 Vertex::x() const {
  // @@protoc_insertion_point(field_get:is.vision.Vertex.x)
  return x_;
}
inline void Vertex::set_x(::google::protobuf::uint32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:is.vision.Vertex.x)
}

// uint32 y = 2;
inline void Vertex::clear_y() {
  y_ = 0u;
}
inline ::google::protobuf::uint32 Vertex::y() const {
  // @@protoc_insertion_point(field_get:is.vision.Vertex.y)
  return y_;
}
inline void Vertex::set_y(::google::protobuf::uint32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:is.vision.Vertex.y)
}

// -------------------------------------------------------------------

// BoundingBox

// uint32 x = 1;
inline void BoundingBox::clear_x() {
  x_ = 0u;
}
inline ::google::protobuf::uint32 BoundingBox::x() const {
  // @@protoc_insertion_point(field_get:is.vision.BoundingBox.x)
  return x_;
}
inline void BoundingBox::set_x(::google::protobuf::uint32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:is.vision.BoundingBox.x)
}

// uint32 y = 2;
inline void BoundingBox::clear_y() {
  y_ = 0u;
}
inline ::google::protobuf::uint32 BoundingBox::y() const {
  // @@protoc_insertion_point(field_get:is.vision.BoundingBox.y)
  return y_;
}
inline void BoundingBox::set_y(::google::protobuf::uint32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:is.vision.BoundingBox.y)
}

// uint32 height = 3;
inline void BoundingBox::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 BoundingBox::height() const {
  // @@protoc_insertion_point(field_get:is.vision.BoundingBox.height)
  return height_;
}
inline void BoundingBox::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:is.vision.BoundingBox.height)
}

// uint32 width = 4;
inline void BoundingBox::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 BoundingBox::width() const {
  // @@protoc_insertion_point(field_get:is.vision.BoundingBox.width)
  return width_;
}
inline void BoundingBox::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:is.vision.BoundingBox.width)
}

// -------------------------------------------------------------------

// Resolution

// uint32 height = 1;
inline void Resolution::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 Resolution::height() const {
  // @@protoc_insertion_point(field_get:is.vision.Resolution.height)
  return height_;
}
inline void Resolution::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:is.vision.Resolution.height)
}

// uint32 width = 2;
inline void Resolution::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 Resolution::width() const {
  // @@protoc_insertion_point(field_get:is.vision.Resolution.width)
  return width_;
}
inline void Resolution::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:is.vision.Resolution.width)
}

// -------------------------------------------------------------------

// ImageSettings

// .is.vision.Resolution resolution = 1;
inline bool ImageSettings::has_resolution() const {
  return this != internal_default_instance() && resolution_ != NULL;
}
inline void ImageSettings::clear_resolution() {
  if (GetArenaNoVirtual() == NULL && resolution_ != NULL) delete resolution_;
  resolution_ = NULL;
}
inline const ::is::vision::Resolution& ImageSettings::resolution() const {
  const ::is::vision::Resolution* p = resolution_;
  // @@protoc_insertion_point(field_get:is.vision.ImageSettings.resolution)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::Resolution*>(
      &::is::vision::_Resolution_default_instance_);
}
inline ::is::vision::Resolution* ImageSettings::mutable_resolution() {
  
  if (resolution_ == NULL) {
    resolution_ = new ::is::vision::Resolution;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.ImageSettings.resolution)
  return resolution_;
}
inline ::is::vision::Resolution* ImageSettings::release_resolution() {
  // @@protoc_insertion_point(field_release:is.vision.ImageSettings.resolution)
  
  ::is::vision::Resolution* temp = resolution_;
  resolution_ = NULL;
  return temp;
}
inline void ImageSettings::set_allocated_resolution(::is::vision::Resolution* resolution) {
  delete resolution_;
  resolution_ = resolution;
  if (resolution) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.ImageSettings.resolution)
}

// .is.vision.ImageFormat format = 2;
inline void ImageSettings::clear_format() {
  format_ = 0;
}
inline ::is::vision::ImageFormat ImageSettings::format() const {
  // @@protoc_insertion_point(field_get:is.vision.ImageSettings.format)
  return static_cast< ::is::vision::ImageFormat >(format_);
}
inline void ImageSettings::set_format(::is::vision::ImageFormat value) {
  
  format_ = value;
  // @@protoc_insertion_point(field_set:is.vision.ImageSettings.format)
}

// .is.vision.ColorSpace color = 3;
inline void ImageSettings::clear_color() {
  color_ = 0;
}
inline ::is::vision::ColorSpace ImageSettings::color() const {
  // @@protoc_insertion_point(field_get:is.vision.ImageSettings.color)
  return static_cast< ::is::vision::ColorSpace >(color_);
}
inline void ImageSettings::set_color(::is::vision::ColorSpace value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:is.vision.ImageSettings.color)
}

// .is.vision.BoundingBox roi = 4;
inline bool ImageSettings::has_roi() const {
  return this != internal_default_instance() && roi_ != NULL;
}
inline void ImageSettings::clear_roi() {
  if (GetArenaNoVirtual() == NULL && roi_ != NULL) delete roi_;
  roi_ = NULL;
}
inline const ::is::vision::BoundingBox& ImageSettings::roi() const {
  const ::is::vision::BoundingBox* p = roi_;
  // @@protoc_insertion_point(field_get:is.vision.ImageSettings.roi)
  return p != NULL ? *p : *reinterpret_cast<const ::is::vision::BoundingBox*>(
      &::is::vision::_BoundingBox_default_instance_);
}
inline ::is::vision::BoundingBox* ImageSettings::mutable_roi() {
  
  if (roi_ == NULL) {
    roi_ = new ::is::vision::BoundingBox;
  }
  // @@protoc_insertion_point(field_mutable:is.vision.ImageSettings.roi)
  return roi_;
}
inline ::is::vision::BoundingBox* ImageSettings::release_roi() {
  // @@protoc_insertion_point(field_release:is.vision.ImageSettings.roi)
  
  ::is::vision::BoundingBox* temp = roi_;
  roi_ = NULL;
  return temp;
}
inline void ImageSettings::set_allocated_roi(::is::vision::BoundingBox* roi) {
  delete roi_;
  roi_ = roi;
  if (roi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:is.vision.ImageSettings.roi)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace vision
}  // namespace is

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::is::vision::ImageFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::is::vision::ImageFormat>() {
  return ::is::vision::ImageFormat_descriptor();
}
template <> struct is_proto_enum< ::is::vision::ColorSpace> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::is::vision::ColorSpace>() {
  return ::is::vision::ColorSpace_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_image_2eproto__INCLUDED
